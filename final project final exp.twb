<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20183.18.1219.1533                               -->
<workbook original-version='18.1' source-build='2018.3.2 (20183.18.1219.1533)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <CascadingFilters />
    <IntuitiveSorting />
    <VizInTooltipHideWorksheet />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column caption='Enter Year' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;2016&quot;'>
        <calculation class='tableau' formula='&quot;2016&quot;' />
        <members>
          <member value='&quot;2015&quot;' />
          <member value='&quot;2016&quot;' />
          <member value='&quot;2017&quot;' />
          <member value='&quot;2018&quot;' />
          <member value='&quot;2019&quot;' />
        </members>
      </column>
      <column alias='Restaurant Price Index' caption='Select a Measure' datatype='integer' datatype-customized='true' name='[Parameter 2]' param-domain-type='list' role='measure' type='quantitative' value='5'>
        <calculation class='tableau' formula='5' />
        <aliases>
          <alias key='1' value='Cost of Living Index' />
          <alias key='2' value='Cost of Living Plus Rent Index' />
          <alias key='3' value='Groceries Index' />
          <alias key='4' value='Rent Index' />
          <alias key='5' value='Restaurant Price Index' />
        </aliases>
        <members>
          <member alias='Cost of Living Index' value='1' />
          <member alias='Cost of Living Plus Rent Index' value='2' />
          <member alias='Groceries Index' value='3' />
          <member alias='Rent Index' value='4' />
          <member alias='Restaurant Price Index' value='5' />
        </members>
      </column>
      <column caption='New York Index' datatype='real' default-format='N' name='[Parameter 3]' param-domain-type='any' role='measure' type='quantitative' value='100.0'>
        <calculation class='tableau' formula='100.0' />
      </column>
      <column alias='Local Purchaing Power' caption='Select View' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;View2&quot;'>
        <calculation class='tableau' formula='&quot;View2&quot;' />
        <aliases>
          <alias key='&quot;View1&quot;' value='Cost of Living' />
          <alias key='&quot;View2&quot;' value='Local Purchaing Power' />
        </aliases>
        <members>
          <member alias='Cost of Living' value='&quot;View1&quot;' />
          <member alias='Local Purchaing Power' value='&quot;View2&quot;' />
        </members>
      </column>
    </datasource>
    <datasource caption='Cost_of_living_index' inline='true' name='federated.043si4z1bpu3rw1arc7hc12wyv8j' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Cost_of_living_index' name='textscan.0gu4p4j0mrh54j1dp4m0z1etu4j5'>
            <connection class='textscan' directory='C:/github code/tableu/UCSC/cost-of-living-index-by-country' filename='Cost_of_living_index.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.0gu4p4j0mrh54j1dp4m0z1etu4j5' name='Cost_of_living_index.csv' table='[Cost_of_living_index#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='Rank' ordinal='0' />
            <column datatype='string' name='City' ordinal='1' />
            <column datatype='string' name='State' ordinal='2' />
            <column datatype='string' name='Country' ordinal='3' />
            <column datatype='real' name='Cost of Living Index' ordinal='4' />
            <column datatype='real' name='Rent Index' ordinal='5' />
            <column datatype='real' name='Cost of Living Plus Rent Index' ordinal='6' />
            <column datatype='real' name='Groceries Index' ordinal='7' />
            <column datatype='real' name='Restaurant Price Index' ordinal='8' />
            <column datatype='real' name='Local Purchasing Power Index' ordinal='9' />
            <column datatype='string' name='Year' ordinal='10' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Cost_of_living_index.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Rank</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Rank]</local-name>
            <parent-name>[Cost_of_living_index.csv]</parent-name>
            <remote-alias>Rank</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>City</remote-name>
            <remote-type>129</remote-type>
            <local-name>[City]</local-name>
            <parent-name>[Cost_of_living_index.csv]</parent-name>
            <remote-alias>City</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>129</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[Cost_of_living_index.csv]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[Cost_of_living_index.csv]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Cost of Living Index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Cost of Living Index]</local-name>
            <parent-name>[Cost_of_living_index.csv]</parent-name>
            <remote-alias>Cost of Living Index</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Rent Index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Rent Index]</local-name>
            <parent-name>[Cost_of_living_index.csv]</parent-name>
            <remote-alias>Rent Index</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Cost of Living Plus Rent Index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Cost of Living Plus Rent Index]</local-name>
            <parent-name>[Cost_of_living_index.csv]</parent-name>
            <remote-alias>Cost of Living Plus Rent Index</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Groceries Index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Groceries Index]</local-name>
            <parent-name>[Cost_of_living_index.csv]</parent-name>
            <remote-alias>Groceries Index</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Restaurant Price Index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Restaurant Price Index]</local-name>
            <parent-name>[Cost_of_living_index.csv]</parent-name>
            <remote-alias>Restaurant Price Index</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Local Purchasing Power Index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Local Purchasing Power Index]</local-name>
            <parent-name>[Cost_of_living_index.csv]</parent-name>
            <remote-alias>Local Purchasing Power Index</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[Cost_of_living_index.csv]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='City Affordability' datatype='string' name='[Calculation_345932786296545280]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='if ([Cost of Living Plus Rent Index]&gt; [Local Purchasing Power Index]) THEN&#13;&#10;&quot;Expensive City&quot;&#13;&#10;ELSE&#13;&#10;&quot;Affordable&quot;&#13;&#10;END' />
      </column>
      <column caption='Selected Year' datatype='string' name='[Calculation_345932786470580225]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='if [Year]=[Parameters].[Parameter 1] then [Year] END' />
      </column>
      <column caption='Measure' datatype='real' name='[Calculation_529172995489103873]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='case [Parameters].[Parameter 2]&#13;&#10;when 1 then avg([Cost of Living Index])&#13;&#10;WHEN 2 THEN avg([Cost of Living Plus Rent Index])&#13;&#10;WHEN 3 THEN avg([Groceries Index])&#13;&#10;when 4 then avg([Rent Index])&#13;&#10;when 5 then avg([Restaurant Price Index])&#13;&#10;END' />
      </column>
      <column caption='Y Axis Title' datatype='string' name='[Calculation_529172995496595458]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='case [Parameters].[Parameter 2]&#13;&#10;when 1 then &quot;Cost of Living Index&quot;&#13;&#10;WHEN 2 THEN &quot;Cost of Living Plus Rent Index&quot;&#13;&#10;WHEN 3 THEN &quot;Groceries Index&quot;&#13;&#10;When 4 THEN &quot;Local Purchasing Power Index&quot;&#13;&#10;when 5 then &quot;Rent Index&quot;&#13;&#10;when 6 then &quot;Restaurant Price Index&quot;&#13;&#10;END' />
      </column>
      <column caption='total' datatype='real' name='[Calculation_529172995598790668]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Cost of Living Index]+[Rent Index]' />
      </column>
      <column caption='View Selected' datatype='string' name='[Calculation_529172995774558221]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[Parameters].[Parameter 4]' />
      </column>
      <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
        <semantic-values semantic-role='[City].[Name]'>
          <semantic-value key='&quot;Aachen&quot;' value='&quot;Aachen&quot;' />
          <semantic-value key='&quot;Aalborg&quot;' value='&quot;Aalborg&quot;' />
          <semantic-value key='&quot;Abbotsford&quot;' value='&quot;Abbotsford&quot;' />
          <semantic-value key='&quot;Abu Dhabi&quot;' value='&quot;Abu Dhabi&quot;' />
          <semantic-value key='&quot;Accra&quot;' value='&quot;Accra&quot;' />
          <semantic-value key='&quot;Amsterdam&quot;' value='&quot;Amsterdam&quot;' />
          <semantic-value key='&quot;Bern&quot;' value='&quot;Bern&quot;' />
          <semantic-value key='&quot;Bhopal&quot;' value='&quot;Bhopal&quot;' />
          <semantic-value key='&quot;Bhubaneswar&quot;' value='&quot;Bhubaneswar&quot;' />
          <semantic-value key='&quot;Bilbao&quot;' value='&quot;Bilbao&quot;' />
          <semantic-value key='&quot;Bogota&quot;' value='&quot;Bogota&quot;' />
        </semantic-values>
        <semantic-values semantic-role='[Geographical].[Latitude]'>
          <semantic-value key='&quot;Aberdeen&quot;' value='57.149700000000003' />
          <semantic-value key='&quot;Ad Dammam&quot;' value='26.4207' />
        </semantic-values>
        <semantic-values semantic-role='[Geographical].[Longitude]'>
          <semantic-value key='&quot;Aberdeen&quot;' value='2.0943000000000001' />
          <semantic-value key='&quot;Ad Dammam&quot;' value='50.088799999999999' />
        </semantic-values>
      </column>
      <column datatype='real' name='[Cost of Living Index]' role='measure' type='quantitative' />
      <column datatype='real' name='[Cost of Living Plus Rent Index]' role='measure' type='quantitative' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
        <semantic-values semantic-role='[Country].[Name]'>
          <semantic-value key='&quot;Kosovo (Disputed Territory)&quot;' value='&quot;Kosovo&quot;' />
        </semantic-values>
      </column>
      <column datatype='real' name='[Groceries Index]' role='measure' type='quantitative' />
      <column datatype='real' name='[Local Purchasing Power Index]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='integer' name='[Rank]' role='measure' type='quantitative' />
      <column datatype='real' name='[Rent Index]' role='measure' type='quantitative' />
      <column datatype='real' name='[Restaurant Price Index]' role='measure' type='quantitative' />
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column-instance column='[Cost of Living Index]' derivation='Avg' name='[avg:Cost of Living Index:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Cost of Living Plus Rent Index]' derivation='Avg' name='[avg:Cost of Living Plus Rent Index:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Groceries Index]' derivation='Avg' name='[avg:Groceries Index:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Local Purchasing Power Index]' derivation='Avg' name='[avg:Local Purchasing Power Index:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Rent Index]' derivation='Avg' name='[avg:Rent Index:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Restaurant Price Index]' derivation='Avg' name='[avg:Restaurant Price Index:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Cost of Living Index]' derivation='Sum' name='[diff:sum:Cost of Living Index:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Number of Records]' derivation='Min' name='[min:Number of Records:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_345932786296545280]' derivation='None' name='[none:Calculation_345932786296545280:nk]' pivot='key' type='nominal' />
      <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
      <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation_529172995598790668]' derivation='Sum' name='[sum:Calculation_529172995598790668:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Cost of Living Index]' derivation='Sum' name='[sum:Cost of Living Index:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Cost of Living Plus Rent Index]' derivation='Sum' name='[sum:Cost of Living Plus Rent Index:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Groceries Index]' derivation='Sum' name='[sum:Groceries Index:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Local Purchasing Power Index]' derivation='Sum' name='[sum:Local Purchasing Power Index:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Rank]' derivation='Sum' name='[sum:Rank:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Rent Index]' derivation='Sum' name='[sum:Rent Index:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Restaurant Price Index]' derivation='Sum' name='[sum:Restaurant Price Index:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_529172995489103873]' derivation='User' name='[usr:Calculation_529172995489103873:qk]' pivot='key' type='quantitative' />
      <group caption='Action (Country)' hidden='true' name='[Action (Country)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Country]' />
        </groupfilter>
      </group>
      <group caption='Action (Y Axis Title,City)' hidden='true' name='[Action (Y Axis Title,City)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_529172995496595458]' />
          <groupfilter function='level-members' level='[City]' />
        </groupfilter>
      </group>
      <group caption='Tooltip (Country)' hidden='true' name='[Tooltip (Country)]' name-style='unqualified' user:auto-column='sheet_link' user:ui-vit-column='true'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Country]' />
        </groupfilter>
      </group>
      <drill-paths>
        <drill-path name='Country, State, City'>
          <field>[Country]</field>
          <field>[State]</field>
          <field>[City]</field>
        </drill-path>
      </drill-paths>
      <layout dim-ordering='alphabetic' dim-percentage='0.373563' measure-ordering='alphabetic' measure-percentage='0.441092' parameter-percentage='0.185345' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:City:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Adelaide&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Arhus&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Banja Luka&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Bhopal&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Bratislava&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cairo&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Chennai&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Coquitlam&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Derby&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Eugene&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Galway&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Guangzhou&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Ho Chi Minh City&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Jaipur&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kelowna&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Lagos&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Little Rock&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Macao&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Melbourne&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Munich&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nicosia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Osaka&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Peoria&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Portsmouth&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Regina&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Salem&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Selangor&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Stamford&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tampa&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Toulouse&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Venice&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Winston-Salem&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Aachen&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Amsterdam&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bakersfield&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bellevue&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bordeaux&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Burgas&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Cebu&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Colombo&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Dar es Salaam&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Durham&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Fort Worth&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Granada&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Harare&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Irbil&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Kansas City&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Kota Kinabalu&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lexington&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ludhiana&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Manila&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Modena&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Navi Mumbai&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Odense&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Paphos&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Plymouth&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Quito&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Rome&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Santa Rosa&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Sliema&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Syracuse&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Thunder Bay&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ulaanbaatar&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Washington&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Zug&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Abu Dhabi&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ann Arbor&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bandar Seri Begawan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bergen&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Braga&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Busan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Charlotte&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Como&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Dayton&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Edmonton&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Fremont&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Greenville&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Heidelberg&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ivano-Frankivsk&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kathmandu&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kuala Lumpur&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Limerick&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Marseille&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Montpellier&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Newark&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Olympia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Patras&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Port of Spain&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Rawalpindi&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Saint Helier&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sarajevo&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Spokane&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Taichung&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Tokyo&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Valencia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Wichita&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Albany&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Asuncion&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Barrie&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bishkek&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bristol&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Campinas&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Christchurch&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Coventry&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Dnipro&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Fayetteville&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Geneva&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Gurgaon&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Houston&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Jersey City&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kigali&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Las Vegas&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;London&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Makati&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Miami&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nairobi&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Norfolk&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Ostrava&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Philadelphia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Pristina&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Richmond&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;San Diego&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sharjah&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Stuttgart&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Tauranga&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Tripoli&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Vientiane&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Yangon&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ahmedabad&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Arlington&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Barcelona&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bhubaneswar&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bremen&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Calgary&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Chiang Mai&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Corfu&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Des Moines&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Everett&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Gatineau&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Guatemala City&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Hobart&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jakarta&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kharkiv&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Lahore&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Liverpool&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Madison&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Memphis&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Muscat&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Nis&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Oshawa&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Perth&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Poznan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Rehovot&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Salt Lake City&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Seoul&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Stavanger&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Tampere&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Trento&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Verona&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Wollongong&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Accra&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Antalya&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bandung&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Berkeley&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Brampton&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bydgoszcz&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Chattanooga&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Concepcion&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Debrecen&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Eindhoven&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Fresno&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Grenoble&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Helsinki&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Izhevsk&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Katowice&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Kuching&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Lincoln&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Lviv&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Martin&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Montreal&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Newcastle&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Omaha&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Pattaya&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Portland&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Reading&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Saint Louis&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Saskatoon&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Springfield&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Taipei&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Toledo&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Valenzuela&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Windhoek&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Almaty&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Aveiro&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Belfast&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bolzano-Bozen&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Buenos Aires&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Casablanca&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;College Station&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Dallas&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Dunedin&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Fort Myers&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Gold Coast&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Hanoi&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Innsbruck&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kaliningrad&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kolkata&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Lethbridge&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Lublin&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Manchester&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mississauga&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Nassau&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Nuremberg&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Palma de Mallorca&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Plano&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Queretaro&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Rochester&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Santa Cruz&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Sioux Falls&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Swindon&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Thessaloniki&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Turin&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Voronezh&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Zagreb&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Aalborg&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Anaheim&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Baku&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bellingham&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Boston&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Burlington&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Chandigarh&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Colorado Springs&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Darmstadt&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Dushanbe&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Fortaleza&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Grand Rapids&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Harrisburg&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Irvine&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Kaohsiung&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Krakow (Cracow)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Lille&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Lugano&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mannheim&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Moncton&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;New Haven&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Odessa&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Paramaribo&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Podgorica&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Rabat&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Rostov-na-donu&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Santiago&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Sofia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Szczecin&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Tijuana&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Uppsala&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Waterloo&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Zurich&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Alicante&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Augusta&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Beijing&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Boise&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bucharest&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Caracas&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Coimbatore&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cyberjaya&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Dublin&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Fort Lauderdale&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Goa&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Hamburg&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Indianapolis&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Jyvaskyla&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Knoxville&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Leiden&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Luanda&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Managua&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Minneapolis&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Nashville&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Novi Sad&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Padova&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Pisa&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Quebec City&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Riverside&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;San Salvador&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sibiu&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Surrey&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Thane&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tulsa&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Visakhapatnam&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;York&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ad Dammam&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Antwerp&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bangalore&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Berlin&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Brasilia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cagliari&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Chelyabinsk&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Constanta&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Delhi&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;El Paso&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Funchal&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Groningen&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Heraklion&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Izmir&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kaunas&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kuwait City&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Linz&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Lyon&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Medan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Moscow&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Newcastle upon Tyne&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Oradea&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Penang&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Porto&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Recife&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Saint Paul&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Savannah&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;St. John&apos;s&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Tallahassee&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Tomsk&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Vancouver&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Windsor&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Albuquerque&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Athens&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Basel&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bitola&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Brno&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Canberra&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cincinnati&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Craiova&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Doha&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Florence&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Genoa&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Guwahati&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Huntsville&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Jerusalem&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kingston&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Lausanne&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Long Beach&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Malaga&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Milan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Nanaimo&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Northampton&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Ottawa&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Phnom Penh&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Puebla&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Riga&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;San Francisco&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sheffield&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sumy&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Tbilisi&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Tromso&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Vijayawada&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Yekaterinburg&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Alexandria&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Atlanta&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bath&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bloomington&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Brooklyn&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cancun&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cleveland&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cuenca&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Dresden&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Florianopolis&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Gent&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Haifa&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hyderabad&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Johannesburg&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Kitchener&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Leeds&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Los Angeles&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Male&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Milton Keynes&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Nantes&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Norwich&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Oulu&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Phoenix&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Puerto Vallarta&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Rijeka&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;San Jose&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Shenzhen&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Surabaya&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Tehran&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Trondheim&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Vilnius&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Yerevan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Allentown&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Austin&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Beirut&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bologna&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Budapest&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Cardiff&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Coimbra&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Dalian&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Dumaguete&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Fort McMurray&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Goiania&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Hamilton&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Indore&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kabul&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kochi&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Leipzig&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Lubbock&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Manama&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Minsk&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Nasik&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Novosibirsk&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Palermo&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Pittsburgh&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Queens&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Riyadh&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Santa Barbara&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Suzhou&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;The Hague (Den Haag)&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Tunis&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Vladivostok&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Zadar&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Amman&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Baghdad&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Belgrade&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bonn&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Buffalo&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Catania&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Cologne&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Damascus&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Durban&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Fort Wayne&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Gothenburg&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Hanover&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Iowa City&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Kampala&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Kosice&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Leuven&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Lucknow (Lakhnau)&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mangalore&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mobile&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Natal&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Oakland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Panama City&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Plovdiv&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Quezon City&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Rockville&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Santa Cruz de Tenerife&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Skopje&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sydney&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Thiruvananthapuram&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Turku&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Warsaw&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Zaragoza (Saragossa)&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Akron&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Asheville&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bari&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bilbao&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Brighton&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cali&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Chicago&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cork&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Detroit&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Exeter&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Gdansk&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Guayaquil&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Jalandhar&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Khartoum&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Larnaca&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Ljubljana&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Madrid&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Merida&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mysore&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Nizhny Novgorod&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Osijek&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Petaling Jaya&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Prague&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Reno&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Samara&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Seville (Sevilla)&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Stockholm&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Tartu&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Treviso&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Victoria&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Wroclaw&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Addis Ababa&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Arad&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bangkok&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bern&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Brasov&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cairns&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Chengdu&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Copenhagen&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Denver&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Espoo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Gainesville&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Guadalajara&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Hermosillo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Jacksonville&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kazan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kyoto&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Lisbon&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Maastricht&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Medellin&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Mumbai&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Nice&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Orlando&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Pensacola&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Porto Alegre&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Red Deer&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Saint Petersburg&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Seattle&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;St.Catharines&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Tallinn&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Toronto&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Varna&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Winnipeg&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Abbotsford&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Anchorage&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bali&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Belo Horizonte&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Boulder&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Burnaby&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Chania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Columbia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Darwin&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Dusseldorf&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Frankfurt&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Graz&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Hartford&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Islamabad&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Karachi&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Krasnodar&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Lima&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Lund&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Maputo&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Monterrey&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;New Orleans&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Oklahoma City&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Paris&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Port Elizabeth&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Raleigh&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Rotterdam&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Santo Domingo&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Southampton&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Szeged&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Timisoara&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Utrecht&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Wellington&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Algiers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Auckland&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Beersheba&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bogota&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Brussels&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cape Town&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cluj-Napoca&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Curitiba&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Dubai&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Fort Collins&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Glasgow&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Halifax&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Iasi&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Johor Bahru&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Klaipeda&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Leicester&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Louisville&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Malmo&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Milwaukee&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Naples&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Nottingham&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Oxford&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Phuket&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Pune&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Rio de Janeiro&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;San Juan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Shreveport&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Surat&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Tel Aviv-Yafo&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Tucson&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Virginia Beach&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Yogyakarta&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Al Khobar&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Astana&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Barranquilla&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Birmingham&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Brisbane&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Cambridge&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Chisinau&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Corunna&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Dhaka&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Fairfax&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Gdynia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Guelph&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Honolulu&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Jeddah (Jiddah)&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Kiev&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Las Palmas de Gran Canaria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Lodz&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Madurai&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mexico City&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Nagpur&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Noida&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Oslo&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Peterborough&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Pretoria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Reykjavik&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;San Antonio&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Shanghai&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Strasbourg&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Tashkent&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Trieste&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Vienna&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Xi&apos;an&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Aberdeen&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ankara&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Baltimore&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bergamo&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bournemouth&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bursa&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Charleston&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Columbus&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Davao&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Edinburgh&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Fredericton&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Greensboro&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Havana&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Istanbul&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Karlsruhe&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Krasnoyarsk&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Limassol&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Lusaka&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Maribor&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Montevideo&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;New York&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Olomouc&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Parma&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Port Moresby&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ramat Gan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Sacramento&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Sao Paulo&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Split&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Tacoma&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Tirana&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Vadodara&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;West Palm Beach&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Kosovo (Disputed Territory)&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Macao&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Trinidad And Tobago&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Jersey&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bosnia And Herzegovina&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Macedonia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Selangor&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Cost of Living Index:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[diff:sum:Cost of Living Index:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[sum:Calculation_529172995598581770:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[sum:Calculation_529172995598671883:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[sum:Cost of Living Index:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[usr:Calculation_529172995489103873:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.043si4z1bpu3rw1arc7hc12wyv8j]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[sum:Local Purchasing Power Index:qk]&quot;</bucket>
            </map>
            <map to='#8fb202'>
              <bucket>&quot;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Restaurant Price Index:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[sum:Rank:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[sum:Calculation_529172995598790668:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Cost of Living Plus Rent Index:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[sum:Cost of Living Plus Rent Index:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[sum:Groceries Index:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[min:Number of Records:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[sum:Number of Records:qk]&quot;</bucket>
            </map>
            <map to='#f1788d'>
              <bucket>&quot;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Groceries Index:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Rent Index:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[sum:Number of Records:qk]:1&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[sum:Rent Index:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[sum:Restaurant Price Index:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Calculation_345932786296545280:nk]' type='palette'>
            <map to='#59a14f'>
              <bucket>&quot;Affordable&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Expensive City&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Enter Year' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;2016&quot;'>
          <calculation class='tableau' formula='&quot;2016&quot;' />
        </column>
        <column alias='Restaurant Price Index' caption='Select a Measure' datatype='integer' datatype-customized='true' name='[Parameter 2]' param-domain-type='list' role='measure' type='quantitative' value='5'>
          <calculation class='tableau' formula='5' />
          <aliases>
            <alias key='1' value='Cost of Living Index' />
            <alias key='2' value='Cost of Living Plus Rent Index' />
            <alias key='3' value='Groceries Index' />
            <alias key='4' value='Rent Index' />
            <alias key='5' value='Restaurant Price Index' />
          </aliases>
        </column>
        <column alias='Local Purchaing Power' caption='Select View' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;View2&quot;'>
          <calculation class='tableau' formula='&quot;View2&quot;' />
          <aliases>
            <alias key='&quot;View1&quot;' value='Cost of Living' />
            <alias key='&quot;View2&quot;' value='Local Purchaing Power' />
          </aliases>
        </column>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Filter 1 (generated)' name='[Action1]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Top 10 countries' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter 2 (generated)' name='[Action2]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Cost index by Countries' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter 3 (generated)' name='[Action3]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Cities vx index' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter 4 (generated)' name='[Action4]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Local Purchasing Index by Countries' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Cities vx index'>
      <layout-options>
        <title>
          <formatted-text />
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Cost_of_living_index' name='federated.043si4z1bpu3rw1arc7hc12wyv8j' />
            <datasource name='Parameters' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Enter Year' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;2016&quot;'>
              <calculation class='tableau' formula='&quot;2016&quot;' />
            </column>
            <column alias='Restaurant Price Index' caption='Select a Measure' datatype='integer' datatype-customized='true' name='[Parameter 2]' param-domain-type='list' role='measure' type='quantitative' value='5'>
              <calculation class='tableau' formula='5' />
              <aliases>
                <alias key='1' value='Cost of Living Index' />
                <alias key='2' value='Cost of Living Plus Rent Index' />
                <alias key='3' value='Groceries Index' />
                <alias key='4' value='Rent Index' />
                <alias key='5' value='Restaurant Price Index' />
              </aliases>
            </column>
            <column caption='New York Index' datatype='real' default-format='N' name='[Parameter 3]' param-domain-type='any' role='measure' type='quantitative' value='100.0'>
              <calculation class='tableau' formula='100.0' />
            </column>
            <column alias='Local Purchaing Power' caption='Select View' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;View2&quot;'>
              <calculation class='tableau' formula='&quot;View2&quot;' />
              <aliases>
                <alias key='&quot;View1&quot;' value='Cost of Living' />
                <alias key='&quot;View2&quot;' value='Local Purchaing Power' />
              </aliases>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.043si4z1bpu3rw1arc7hc12wyv8j'>
            <column caption='Selected Year' datatype='string' name='[Calculation_345932786470580225]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if [Year]=[Parameters].[Parameter 1] then [Year] END' />
            </column>
            <column caption='Measure' datatype='real' name='[Calculation_529172995489103873]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='case [Parameters].[Parameter 2]&#13;&#10;when 1 then avg([Cost of Living Index])&#13;&#10;WHEN 2 THEN avg([Cost of Living Plus Rent Index])&#13;&#10;WHEN 3 THEN avg([Groceries Index])&#13;&#10;when 4 then avg([Rent Index])&#13;&#10;when 5 then avg([Restaurant Price Index])&#13;&#10;END' />
            </column>
            <column caption='Y Axis Title' datatype='string' name='[Calculation_529172995496595458]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='case [Parameters].[Parameter 2]&#13;&#10;when 1 then &quot;Cost of Living Index&quot;&#13;&#10;WHEN 2 THEN &quot;Cost of Living Plus Rent Index&quot;&#13;&#10;WHEN 3 THEN &quot;Groceries Index&quot;&#13;&#10;When 4 THEN &quot;Local Purchasing Power Index&quot;&#13;&#10;when 5 then &quot;Rent Index&quot;&#13;&#10;when 6 then &quot;Restaurant Price Index&quot;&#13;&#10;END' />
            </column>
            <column caption='View Selected' datatype='string' name='[Calculation_529172995774558221]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 4]' />
            </column>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <semantic-values semantic-role='[City].[Name]'>
                <semantic-value key='&quot;Aachen&quot;' value='&quot;Aachen&quot;' />
                <semantic-value key='&quot;Aalborg&quot;' value='&quot;Aalborg&quot;' />
                <semantic-value key='&quot;Abbotsford&quot;' value='&quot;Abbotsford&quot;' />
                <semantic-value key='&quot;Abu Dhabi&quot;' value='&quot;Abu Dhabi&quot;' />
                <semantic-value key='&quot;Accra&quot;' value='&quot;Accra&quot;' />
                <semantic-value key='&quot;Amsterdam&quot;' value='&quot;Amsterdam&quot;' />
                <semantic-value key='&quot;Bern&quot;' value='&quot;Bern&quot;' />
                <semantic-value key='&quot;Bhopal&quot;' value='&quot;Bhopal&quot;' />
                <semantic-value key='&quot;Bhubaneswar&quot;' value='&quot;Bhubaneswar&quot;' />
                <semantic-value key='&quot;Bilbao&quot;' value='&quot;Bilbao&quot;' />
                <semantic-value key='&quot;Bogota&quot;' value='&quot;Bogota&quot;' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Latitude]'>
                <semantic-value key='&quot;Aberdeen&quot;' value='57.149700000000003' />
                <semantic-value key='&quot;Ad Dammam&quot;' value='26.4207' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Longitude]'>
                <semantic-value key='&quot;Aberdeen&quot;' value='2.0943000000000001' />
                <semantic-value key='&quot;Ad Dammam&quot;' value='50.088799999999999' />
              </semantic-values>
            </column>
            <column datatype='real' name='[Cost of Living Index]' role='measure' type='quantitative' />
            <column datatype='real' name='[Cost of Living Plus Rent Index]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Kosovo (Disputed Territory)&quot;' value='&quot;Kosovo&quot;' />
              </semantic-values>
            </column>
            <column datatype='real' name='[Groceries Index]' role='measure' type='quantitative' />
            <column datatype='real' name='[Rent Index]' role='measure' type='quantitative' />
            <column datatype='real' name='[Restaurant Price Index]' role='measure' type='quantitative' />
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_345932786470580225]' derivation='None' name='[none:Calculation_345932786470580225:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_529172995496595458]' derivation='None' name='[none:Calculation_529172995496595458:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_529172995774558221]' derivation='None' name='[none:Calculation_529172995774558221:nk]' pivot='key' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_529172995489103873]' derivation='User' name='[usr:Calculation_529172995489103873:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Action (Country)]'>
            <groupfilter function='level-members' level='[Country]' user:ui-action-filter='[Action1]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_345932786470580225:nk]' filter-group='3'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2015&quot;' />
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2016&quot;' />
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2017&quot;' />
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2018&quot;' />
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2019&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995774558221:nk]'>
            <groupfilter function='member' level='[none:Calculation_529172995774558221:nk]' member='&quot;View1&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Country:nk]'>
            <groupfilter function='level-members' level='[none:Country:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <columns>
            <shelf-sort direction='DESC' measure-to-sort-by='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[usr:Calculation_529172995489103873:qk]'>
              <dimensions-to-sort>
                <dimension>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:City:nk]</dimension>
              </dimensions-to-sort>
              <sort-filter-info>
                <sort-filter level-name='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995496595458:nk]' member-value='&quot;Rent Index&quot;' />
              </sort-filter-info>
            </shelf-sort>
          </columns>
          <slices>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Country:nk]</column>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995774558221:nk]</column>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Action (Country)]</column>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_345932786470580225:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[usr:Calculation_529172995489103873:qk]' scope='rows' value='' />
            <format attr='width' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[usr:Calculation_529172995489103873:qk]' value='48' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-orientation' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995496595458:nk]' value='-90' />
            <format attr='font-weight' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995496595458:nk]' value='bold' />
            <format attr='font-size' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995496595458:nk]' value='10' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[usr:Calculation_529172995489103873:qk]' palette='red_blue_diverging_10_0' reverse='true' type='interpolated' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='line-visibility' id='refline0' value='on' />
            <format attr='line-pattern-only' id='refline0' value='dashed' />
            <format attr='stroke-size' id='refline0' value='3' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[usr:Calculation_529172995489103873:qk]' />
            </encodings>
            <reference-line axis-column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[usr:Calculation_529172995489103873:qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='none' probability='95' scope='per-cell' value-column='[Parameters].[Parameter 3]' z-order='1' />
          </pane>
        </panes>
        <rows>([federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995496595458:nk] * [federated.043si4z1bpu3rw1arc7hc12wyv8j].[usr:Calculation_529172995489103873:qk])</rows>
        <cols>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:City:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='City Affordability'>
      <table>
        <view>
          <datasources>
            <datasource caption='Cost_of_living_index' name='federated.043si4z1bpu3rw1arc7hc12wyv8j' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Enter Year' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;2016&quot;'>
              <calculation class='tableau' formula='&quot;2016&quot;' />
            </column>
            <column alias='Restaurant Price Index' caption='Select a Measure' datatype='integer' datatype-customized='true' name='[Parameter 2]' param-domain-type='list' role='measure' type='quantitative' value='5'>
              <calculation class='tableau' formula='5' />
              <aliases>
                <alias key='1' value='Cost of Living Index' />
                <alias key='2' value='Cost of Living Plus Rent Index' />
                <alias key='3' value='Groceries Index' />
                <alias key='4' value='Rent Index' />
                <alias key='5' value='Restaurant Price Index' />
              </aliases>
            </column>
            <column caption='New York Index' datatype='real' default-format='N' name='[Parameter 3]' param-domain-type='any' role='measure' type='quantitative' value='100.0'>
              <calculation class='tableau' formula='100.0' />
            </column>
            <column alias='Local Purchaing Power' caption='Select View' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;View2&quot;'>
              <calculation class='tableau' formula='&quot;View2&quot;' />
              <aliases>
                <alias key='&quot;View1&quot;' value='Cost of Living' />
                <alias key='&quot;View2&quot;' value='Local Purchaing Power' />
              </aliases>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.043si4z1bpu3rw1arc7hc12wyv8j'>
            <column caption='City Affordability' datatype='string' name='[Calculation_345932786296545280]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ([Cost of Living Plus Rent Index]&gt; [Local Purchasing Power Index]) THEN&#13;&#10;&quot;Expensive City&quot;&#13;&#10;ELSE&#13;&#10;&quot;Affordable&quot;&#13;&#10;END' />
            </column>
            <column caption='Selected Year' datatype='string' name='[Calculation_345932786470580225]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if [Year]=[Parameters].[Parameter 1] then [Year] END' />
            </column>
            <column caption='Y Axis Title' datatype='string' name='[Calculation_529172995496595458]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='case [Parameters].[Parameter 2]&#13;&#10;when 1 then &quot;Cost of Living Index&quot;&#13;&#10;WHEN 2 THEN &quot;Cost of Living Plus Rent Index&quot;&#13;&#10;WHEN 3 THEN &quot;Groceries Index&quot;&#13;&#10;When 4 THEN &quot;Local Purchasing Power Index&quot;&#13;&#10;when 5 then &quot;Rent Index&quot;&#13;&#10;when 6 then &quot;Restaurant Price Index&quot;&#13;&#10;END' />
            </column>
            <column caption='View Selected' datatype='string' name='[Calculation_529172995774558221]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 4]' />
            </column>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <semantic-values semantic-role='[City].[Name]'>
                <semantic-value key='&quot;Aachen&quot;' value='&quot;Aachen&quot;' />
                <semantic-value key='&quot;Aalborg&quot;' value='&quot;Aalborg&quot;' />
                <semantic-value key='&quot;Abbotsford&quot;' value='&quot;Abbotsford&quot;' />
                <semantic-value key='&quot;Abu Dhabi&quot;' value='&quot;Abu Dhabi&quot;' />
                <semantic-value key='&quot;Accra&quot;' value='&quot;Accra&quot;' />
                <semantic-value key='&quot;Amsterdam&quot;' value='&quot;Amsterdam&quot;' />
                <semantic-value key='&quot;Bern&quot;' value='&quot;Bern&quot;' />
                <semantic-value key='&quot;Bhopal&quot;' value='&quot;Bhopal&quot;' />
                <semantic-value key='&quot;Bhubaneswar&quot;' value='&quot;Bhubaneswar&quot;' />
                <semantic-value key='&quot;Bilbao&quot;' value='&quot;Bilbao&quot;' />
                <semantic-value key='&quot;Bogota&quot;' value='&quot;Bogota&quot;' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Latitude]'>
                <semantic-value key='&quot;Aberdeen&quot;' value='57.149700000000003' />
                <semantic-value key='&quot;Ad Dammam&quot;' value='26.4207' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Longitude]'>
                <semantic-value key='&quot;Aberdeen&quot;' value='2.0943000000000001' />
                <semantic-value key='&quot;Ad Dammam&quot;' value='50.088799999999999' />
              </semantic-values>
            </column>
            <column datatype='real' name='[Cost of Living Plus Rent Index]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Kosovo (Disputed Territory)&quot;' value='&quot;Kosovo&quot;' />
              </semantic-values>
            </column>
            <column datatype='real' name='[Local Purchasing Power Index]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column-instance column='[City]' derivation='Attribute' name='[attr:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='Attribute' name='[attr:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='Attribute' name='[attr:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Local Purchasing Power Index]' derivation='Avg' name='[avg:Local Purchasing Power Index:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_345932786296545280]' derivation='None' name='[none:Calculation_345932786296545280:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_345932786470580225]' derivation='None' name='[none:Calculation_345932786470580225:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_529172995774558221]' derivation='None' name='[none:Calculation_529172995774558221:nk]' pivot='key' type='nominal' />
            <column-instance column='[Cost of Living Plus Rent Index]' derivation='Sum' name='[sum:Cost of Living Plus Rent Index:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Action (Country)]'>
            <groupfilter function='level-members' level='[Country]' user:ui-action-filter='[Action4]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Action (Y Axis Title,City)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action3]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Calculation_529172995496595458]' />
              <groupfilter function='level-members' level='[City]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_345932786470580225:nk]' filter-group='3'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2015&quot;' />
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2016&quot;' />
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2017&quot;' />
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2018&quot;' />
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2019&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995774558221:nk]'>
            <groupfilter function='member' level='[none:Calculation_529172995774558221:nk]' member='&quot;View2&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Action (Country)]</column>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995774558221:nk]</column>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_345932786470580225:nk]</column>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Action (Y Axis Title,City)]</column>
          </slices>
          <aggregation value='false' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]' field-type='quantitative' major-origin='100.0' major-show='false' major-spacing='10.0' minor-origin='0.0' minor-show='false' minor-spacing='10.0' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[sum:Cost of Living Plus Rent Index:qk]' field-type='quantitative' major-origin='0.0' major-show='false' major-spacing='100.0' minor-origin='0.0' minor-show='false' minor-spacing='10.0' scope='rows' type='space' />
            <format attr='width' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[sum:Cost of Living Plus Rent Index:qk]' value='40' />
            <format attr='height' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]' value='29' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='fill-above' id='refline1' value='#00000000' />
            <format attr='fill-below' id='refline1' value='#00000000' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_345932786296545280:nk]' />
              <tooltip column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[attr:Country:nk]' />
              <tooltip column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[attr:State:nk]' />
              <tooltip column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[attr:City:nk]' />
            </encodings>
            <reference-line axis-column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='none' probability='95' scope='per-pane' value-column='[Parameters].[Parameter 3]' z-order='1' />
            <reference-line axis-column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[sum:Cost of Living Plus Rent Index:qk]' enable-instant-analytics='true' formula='average' id='refline1' label-type='none' probability='95' scope='per-pane' value-column='[Parameters].[Parameter 3]' z-order='2' />
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>City:&#9;</run>
                <run bold='true'>&lt;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[attr:City:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Country:&#9;</run>
                <run bold='true'>&lt;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[attr:Country:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>State:&#9;</run>
                <run bold='true'>&lt;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[attr:State:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Local Purchasing Power Index:&#9;</run>
                <run bold='true'>&lt;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Cost of Living Plus Rent Index:&#9;</run>
                <run bold='true'>&lt;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[sum:Cost of Living Plus Rent Index:qk]&gt;</run>
                <run>Æ&#10;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='678' />
                <format attr='maxwidth' value='678' />
                <format attr='minheight' value='650' />
                <format attr='maxheight' value='650' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[sum:Cost of Living Plus Rent Index:qk]</rows>
        <cols>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Cost index by Countries'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>[Parameters].[Parameter 2]</run>
            <run>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Cost_of_living_index' name='federated.043si4z1bpu3rw1arc7hc12wyv8j' />
            <datasource name='Parameters' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Enter Year' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;2016&quot;'>
              <calculation class='tableau' formula='&quot;2016&quot;' />
            </column>
            <column alias='Restaurant Price Index' caption='Select a Measure' datatype='integer' datatype-customized='true' name='[Parameter 2]' param-domain-type='list' role='measure' type='quantitative' value='5'>
              <calculation class='tableau' formula='5' />
              <aliases>
                <alias key='1' value='Cost of Living Index' />
                <alias key='2' value='Cost of Living Plus Rent Index' />
                <alias key='3' value='Groceries Index' />
                <alias key='4' value='Rent Index' />
                <alias key='5' value='Restaurant Price Index' />
              </aliases>
            </column>
            <column alias='Local Purchaing Power' caption='Select View' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;View2&quot;'>
              <calculation class='tableau' formula='&quot;View2&quot;' />
              <aliases>
                <alias key='&quot;View1&quot;' value='Cost of Living' />
                <alias key='&quot;View2&quot;' value='Local Purchaing Power' />
              </aliases>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.043si4z1bpu3rw1arc7hc12wyv8j'>
            <column caption='Selected Year' datatype='string' name='[Calculation_345932786470580225]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if [Year]=[Parameters].[Parameter 1] then [Year] END' />
            </column>
            <column caption='Measure' datatype='real' name='[Calculation_529172995489103873]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='case [Parameters].[Parameter 2]&#13;&#10;when 1 then avg([Cost of Living Index])&#13;&#10;WHEN 2 THEN avg([Cost of Living Plus Rent Index])&#13;&#10;WHEN 3 THEN avg([Groceries Index])&#13;&#10;when 4 then avg([Rent Index])&#13;&#10;when 5 then avg([Restaurant Price Index])&#13;&#10;END' />
            </column>
            <column caption='Y Axis Title' datatype='string' name='[Calculation_529172995496595458]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='case [Parameters].[Parameter 2]&#13;&#10;when 1 then &quot;Cost of Living Index&quot;&#13;&#10;WHEN 2 THEN &quot;Cost of Living Plus Rent Index&quot;&#13;&#10;WHEN 3 THEN &quot;Groceries Index&quot;&#13;&#10;When 4 THEN &quot;Local Purchasing Power Index&quot;&#13;&#10;when 5 then &quot;Rent Index&quot;&#13;&#10;when 6 then &quot;Restaurant Price Index&quot;&#13;&#10;END' />
            </column>
            <column caption='View Selected' datatype='string' name='[Calculation_529172995774558221]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 4]' />
            </column>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <semantic-values semantic-role='[City].[Name]'>
                <semantic-value key='&quot;Aachen&quot;' value='&quot;Aachen&quot;' />
                <semantic-value key='&quot;Aalborg&quot;' value='&quot;Aalborg&quot;' />
                <semantic-value key='&quot;Abbotsford&quot;' value='&quot;Abbotsford&quot;' />
                <semantic-value key='&quot;Abu Dhabi&quot;' value='&quot;Abu Dhabi&quot;' />
                <semantic-value key='&quot;Accra&quot;' value='&quot;Accra&quot;' />
                <semantic-value key='&quot;Amsterdam&quot;' value='&quot;Amsterdam&quot;' />
                <semantic-value key='&quot;Bern&quot;' value='&quot;Bern&quot;' />
                <semantic-value key='&quot;Bhopal&quot;' value='&quot;Bhopal&quot;' />
                <semantic-value key='&quot;Bhubaneswar&quot;' value='&quot;Bhubaneswar&quot;' />
                <semantic-value key='&quot;Bilbao&quot;' value='&quot;Bilbao&quot;' />
                <semantic-value key='&quot;Bogota&quot;' value='&quot;Bogota&quot;' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Latitude]'>
                <semantic-value key='&quot;Aberdeen&quot;' value='57.149700000000003' />
                <semantic-value key='&quot;Ad Dammam&quot;' value='26.4207' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Longitude]'>
                <semantic-value key='&quot;Aberdeen&quot;' value='2.0943000000000001' />
                <semantic-value key='&quot;Ad Dammam&quot;' value='50.088799999999999' />
              </semantic-values>
            </column>
            <column datatype='real' name='[Cost of Living Index]' role='measure' type='quantitative' />
            <column datatype='real' name='[Cost of Living Plus Rent Index]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Kosovo (Disputed Territory)&quot;' value='&quot;Kosovo&quot;' />
              </semantic-values>
            </column>
            <column datatype='real' name='[Groceries Index]' role='measure' type='quantitative' />
            <column datatype='real' name='[Rent Index]' role='measure' type='quantitative' />
            <column datatype='real' name='[Restaurant Price Index]' role='measure' type='quantitative' />
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_345932786470580225]' derivation='None' name='[none:Calculation_345932786470580225:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_529172995774558221]' derivation='None' name='[none:Calculation_529172995774558221:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_529172995489103873]' derivation='User' name='[usr:Calculation_529172995489103873:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Action (Country)]'>
            <groupfilter function='level-members' level='[Country]' user:ui-action-filter='[Action4]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Action (Y Axis Title,City)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Calculation_529172995496595458]' />
              <groupfilter function='level-members' level='[City]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_345932786470580225:nk]' filter-group='3'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2015&quot;' />
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2016&quot;' />
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2017&quot;' />
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2018&quot;' />
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2019&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995774558221:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Calculation_529172995774558221:nk]' member='&quot;Cost of Living&quot;' />
              <groupfilter function='member' level='[none:Calculation_529172995774558221:nk]' member='&quot;View1&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995774558221:nk]</column>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Action (Y Axis Title,City)]</column>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Action (Country)]</column>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_345932786470580225:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Longitude (generated)]' field-type='quantitative' max='11446239.664893365' min='-15784149.046475055' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Latitude (generated)]' field-type='quantitative' max='17726255.982857954' min='-9006015.861839097' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[usr:Calculation_529172995489103873:qk]' palette='red_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <encodings>
              <color column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[usr:Calculation_529172995489103873:qk]' />
              <text column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Country:nk]' />
              <text column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[usr:Calculation_529172995489103873:qk]' />
              <lod column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Country:nk]' />
              <geometry column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Geometry (generated)]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>&lt;Sheet name=&quot;Tooltip1&quot; maxwidth=&quot;300&quot; maxheight=&quot;300&quot; filter=&quot;&lt;All Fields&gt;&quot;&gt;</run>
                <run>Æ&#10;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-transparency' value='216' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Latitude (generated)]</rows>
        <cols>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Distribuation of Cost of Living Rent'>
      <table>
        <view>
          <datasources>
            <datasource caption='Cost_of_living_index' name='federated.043si4z1bpu3rw1arc7hc12wyv8j' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Enter Year' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;2016&quot;'>
              <calculation class='tableau' formula='&quot;2016&quot;' />
            </column>
            <column alias='Restaurant Price Index' caption='Select a Measure' datatype='integer' datatype-customized='true' name='[Parameter 2]' param-domain-type='list' role='measure' type='quantitative' value='5'>
              <calculation class='tableau' formula='5' />
              <aliases>
                <alias key='1' value='Cost of Living Index' />
                <alias key='2' value='Cost of Living Plus Rent Index' />
                <alias key='3' value='Groceries Index' />
                <alias key='4' value='Rent Index' />
                <alias key='5' value='Restaurant Price Index' />
              </aliases>
            </column>
            <column alias='Local Purchaing Power' caption='Select View' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;View2&quot;'>
              <calculation class='tableau' formula='&quot;View2&quot;' />
              <aliases>
                <alias key='&quot;View1&quot;' value='Cost of Living' />
                <alias key='&quot;View2&quot;' value='Local Purchaing Power' />
              </aliases>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.043si4z1bpu3rw1arc7hc12wyv8j'>
            <column caption='Selected Year' datatype='string' name='[Calculation_345932786470580225]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if [Year]=[Parameters].[Parameter 1] then [Year] END' />
            </column>
            <column caption='Y Axis Title' datatype='string' name='[Calculation_529172995496595458]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='case [Parameters].[Parameter 2]&#13;&#10;when 1 then &quot;Cost of Living Index&quot;&#13;&#10;WHEN 2 THEN &quot;Cost of Living Plus Rent Index&quot;&#13;&#10;WHEN 3 THEN &quot;Groceries Index&quot;&#13;&#10;When 4 THEN &quot;Local Purchasing Power Index&quot;&#13;&#10;when 5 then &quot;Rent Index&quot;&#13;&#10;when 6 then &quot;Restaurant Price Index&quot;&#13;&#10;END' />
            </column>
            <column caption='View Selected' datatype='string' name='[Calculation_529172995774558221]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 4]' />
            </column>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <semantic-values semantic-role='[City].[Name]'>
                <semantic-value key='&quot;Aachen&quot;' value='&quot;Aachen&quot;' />
                <semantic-value key='&quot;Aalborg&quot;' value='&quot;Aalborg&quot;' />
                <semantic-value key='&quot;Abbotsford&quot;' value='&quot;Abbotsford&quot;' />
                <semantic-value key='&quot;Abu Dhabi&quot;' value='&quot;Abu Dhabi&quot;' />
                <semantic-value key='&quot;Accra&quot;' value='&quot;Accra&quot;' />
                <semantic-value key='&quot;Amsterdam&quot;' value='&quot;Amsterdam&quot;' />
                <semantic-value key='&quot;Bern&quot;' value='&quot;Bern&quot;' />
                <semantic-value key='&quot;Bhopal&quot;' value='&quot;Bhopal&quot;' />
                <semantic-value key='&quot;Bhubaneswar&quot;' value='&quot;Bhubaneswar&quot;' />
                <semantic-value key='&quot;Bilbao&quot;' value='&quot;Bilbao&quot;' />
                <semantic-value key='&quot;Bogota&quot;' value='&quot;Bogota&quot;' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Latitude]'>
                <semantic-value key='&quot;Aberdeen&quot;' value='57.149700000000003' />
                <semantic-value key='&quot;Ad Dammam&quot;' value='26.4207' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Longitude]'>
                <semantic-value key='&quot;Aberdeen&quot;' value='2.0943000000000001' />
                <semantic-value key='&quot;Ad Dammam&quot;' value='50.088799999999999' />
              </semantic-values>
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Kosovo (Disputed Territory)&quot;' value='&quot;Kosovo&quot;' />
              </semantic-values>
            </column>
            <column datatype='real' name='[Groceries Index]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column datatype='real' name='[Rent Index]' role='measure' type='quantitative' />
            <column datatype='real' name='[Restaurant Price Index]' role='measure' type='quantitative' />
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column-instance column='[Groceries Index]' derivation='Avg' name='[avg:Groceries Index:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Rent Index]' derivation='Avg' name='[avg:Rent Index:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Restaurant Price Index]' derivation='Avg' name='[avg:Restaurant Price Index:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Number of Records]' derivation='Min' name='[min:Number of Records:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_345932786470580225]' derivation='None' name='[none:Calculation_345932786470580225:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_529172995774558221]' derivation='None' name='[none:Calculation_529172995774558221:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Groceries Index:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Rent Index:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Restaurant Price Index:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Action (Country)]'>
            <groupfilter function='level-members' level='[Country]' user:ui-action-filter='[Action2]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Action (Y Axis Title,City)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action3]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Calculation_529172995496595458]' />
              <groupfilter function='level-members' level='[City]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_345932786470580225:nk]' filter-group='3'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2015&quot;' />
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2016&quot;' />
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2017&quot;' />
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2018&quot;' />
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2019&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995774558221:nk]'>
            <groupfilter function='member' level='[none:Calculation_529172995774558221:nk]' member='&quot;View1&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[:Measure Names]</column>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995774558221:nk]</column>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Action (Country)]</column>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Action (Y Axis Title,City)]</column>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_345932786470580225:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='1' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[min:Number of Records:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
            <format attr='display' class='1' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[min:Number of Records:qk]' scope='rows' value='false' />
            <encoding attr='space' class='0' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[min:Number of Records:qk]' field-type='quantitative' major-origin='0' major-show='false' major-spacing='1.0' minor-origin='0' minor-show='false' minor-spacing='1.0' scope='rows' type='space' />
            <format attr='display' class='0' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[min:Number of Records:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='header'>
            <format attr='border-style' data-class='total' value='none' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Multiple Values]' num-steps='3' palette='sunrise_sunset_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='border-style' data-class='total' value='none' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-visibility' scope='rows' value='off' />
            <format attr='line-visibility' scope='cols' value='off' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[min:Number of Records:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[:Measure Names]' />
              <wedge-size column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Multiple Values]' />
              <text column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Multiple Values]' />
              <text column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[:Measure Names]' />
            </encodings>
            <customized-tooltip>
              <formatted-text />
            </customized-tooltip>
            <customized-label>
              <formatted-text>
                <run>&lt;</run>
                <run>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Multiple Values]</run>
                <run>&gt;</run>
                <run>Æ&#10;</run>
                <run>&lt;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[:Measure Names]&gt;</run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='3.3480663299560547' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[min:Number of Records:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <text column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[min:Number of Records:qk]' />
            </encodings>
            <customized-label>
              <formatted-text>
                <run bold='true'>Cost of Living + Rent</run>
                <run>Æ&#10;</run>
                <run bold='true'>Distribution</run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='cell'>
                <format attr='text-align' value='center' />
                <format attr='vertical-align' value='center' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='size' value='2' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#ffffff' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.043si4z1bpu3rw1arc7hc12wyv8j].[min:Number of Records:qk] + [federated.043si4z1bpu3rw1arc7hc12wyv8j].[min:Number of Records:qk])</rows>
        <cols />
      </table>
    </worksheet>
    <worksheet name='Local Purchasing Index by Countries'>
      <table>
        <view>
          <datasources>
            <datasource caption='Cost_of_living_index' name='federated.043si4z1bpu3rw1arc7hc12wyv8j' />
            <datasource name='Parameters' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Enter Year' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;2016&quot;'>
              <calculation class='tableau' formula='&quot;2016&quot;' />
            </column>
            <column alias='Restaurant Price Index' caption='Select a Measure' datatype='integer' datatype-customized='true' name='[Parameter 2]' param-domain-type='list' role='measure' type='quantitative' value='5'>
              <calculation class='tableau' formula='5' />
              <aliases>
                <alias key='1' value='Cost of Living Index' />
                <alias key='2' value='Cost of Living Plus Rent Index' />
                <alias key='3' value='Groceries Index' />
                <alias key='4' value='Rent Index' />
                <alias key='5' value='Restaurant Price Index' />
              </aliases>
            </column>
            <column alias='Local Purchaing Power' caption='Select View' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;View2&quot;'>
              <calculation class='tableau' formula='&quot;View2&quot;' />
              <aliases>
                <alias key='&quot;View1&quot;' value='Cost of Living' />
                <alias key='&quot;View2&quot;' value='Local Purchaing Power' />
              </aliases>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.043si4z1bpu3rw1arc7hc12wyv8j'>
            <column caption='Selected Year' datatype='string' name='[Calculation_345932786470580225]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if [Year]=[Parameters].[Parameter 1] then [Year] END' />
            </column>
            <column caption='Y Axis Title' datatype='string' name='[Calculation_529172995496595458]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='case [Parameters].[Parameter 2]&#13;&#10;when 1 then &quot;Cost of Living Index&quot;&#13;&#10;WHEN 2 THEN &quot;Cost of Living Plus Rent Index&quot;&#13;&#10;WHEN 3 THEN &quot;Groceries Index&quot;&#13;&#10;When 4 THEN &quot;Local Purchasing Power Index&quot;&#13;&#10;when 5 then &quot;Rent Index&quot;&#13;&#10;when 6 then &quot;Restaurant Price Index&quot;&#13;&#10;END' />
            </column>
            <column caption='View Selected' datatype='string' name='[Calculation_529172995774558221]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 4]' />
            </column>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <semantic-values semantic-role='[City].[Name]'>
                <semantic-value key='&quot;Aachen&quot;' value='&quot;Aachen&quot;' />
                <semantic-value key='&quot;Aalborg&quot;' value='&quot;Aalborg&quot;' />
                <semantic-value key='&quot;Abbotsford&quot;' value='&quot;Abbotsford&quot;' />
                <semantic-value key='&quot;Abu Dhabi&quot;' value='&quot;Abu Dhabi&quot;' />
                <semantic-value key='&quot;Accra&quot;' value='&quot;Accra&quot;' />
                <semantic-value key='&quot;Amsterdam&quot;' value='&quot;Amsterdam&quot;' />
                <semantic-value key='&quot;Bern&quot;' value='&quot;Bern&quot;' />
                <semantic-value key='&quot;Bhopal&quot;' value='&quot;Bhopal&quot;' />
                <semantic-value key='&quot;Bhubaneswar&quot;' value='&quot;Bhubaneswar&quot;' />
                <semantic-value key='&quot;Bilbao&quot;' value='&quot;Bilbao&quot;' />
                <semantic-value key='&quot;Bogota&quot;' value='&quot;Bogota&quot;' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Latitude]'>
                <semantic-value key='&quot;Aberdeen&quot;' value='57.149700000000003' />
                <semantic-value key='&quot;Ad Dammam&quot;' value='26.4207' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Longitude]'>
                <semantic-value key='&quot;Aberdeen&quot;' value='2.0943000000000001' />
                <semantic-value key='&quot;Ad Dammam&quot;' value='50.088799999999999' />
              </semantic-values>
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Kosovo (Disputed Territory)&quot;' value='&quot;Kosovo&quot;' />
              </semantic-values>
            </column>
            <column datatype='real' name='[Local Purchasing Power Index]' role='measure' type='quantitative' />
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column-instance column='[Local Purchasing Power Index]' derivation='Avg' name='[avg:Local Purchasing Power Index:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_345932786470580225]' derivation='None' name='[none:Calculation_345932786470580225:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_529172995774558221]' derivation='None' name='[none:Calculation_529172995774558221:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Action (Country)]'>
            <groupfilter function='level-members' level='[Country]' user:ui-action-filter='[Action1]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Action (Y Axis Title,City)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Calculation_529172995496595458]' />
              <groupfilter function='level-members' level='[City]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_345932786470580225:nk]' filter-group='3'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2015&quot;' />
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2016&quot;' />
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2017&quot;' />
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2018&quot;' />
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2019&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995774558221:nk]'>
            <groupfilter function='member' level='[none:Calculation_529172995774558221:nk]' member='&quot;View2&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995774558221:nk]</column>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Action (Country)]</column>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Action (Y Axis Title,City)]</column>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_345932786470580225:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Longitude (generated)]' field-type='quantitative' max='24895036.344489306' min='-13868951.532666579' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Latitude (generated)]' field-type='quantitative' max='20863230.631987832' min='-17153026.48216226' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]' palette='red_green_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]' />
              <text column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Country:nk]' />
              <text column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]' />
              <lod column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Country:nk]' />
              <geometry column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Geometry (generated)]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run bold='true'>&lt;Sheet name=&quot;Tooltip2&quot; maxwidth=&quot;300&quot; maxheight=&quot;300&quot; filter=&quot;&lt;All Fields&gt;&quot;&gt;</run>
                <run>Æ&#10;</run>
              </formatted-text>
            </customized-tooltip>
            <customized-label>
              <formatted-text>
                <run>&lt;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Country:nk]&gt;</run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Latitude (generated)]</rows>
        <cols>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Tooltip1'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;Y Axis Title&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Cost_of_living_index' name='federated.043si4z1bpu3rw1arc7hc12wyv8j' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='Restaurant Price Index' caption='Select a Measure' datatype='integer' datatype-customized='true' name='[Parameter 2]' param-domain-type='list' role='measure' type='quantitative' value='5'>
              <calculation class='tableau' formula='5' />
              <aliases>
                <alias key='1' value='Cost of Living Index' />
                <alias key='2' value='Cost of Living Plus Rent Index' />
                <alias key='3' value='Groceries Index' />
                <alias key='4' value='Rent Index' />
                <alias key='5' value='Restaurant Price Index' />
              </aliases>
            </column>
            <column alias='Local Purchaing Power' caption='Select View' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;View2&quot;'>
              <calculation class='tableau' formula='&quot;View2&quot;' />
              <aliases>
                <alias key='&quot;View1&quot;' value='Cost of Living' />
                <alias key='&quot;View2&quot;' value='Local Purchaing Power' />
              </aliases>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.043si4z1bpu3rw1arc7hc12wyv8j'>
            <column caption='Measure' datatype='real' name='[Calculation_529172995489103873]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='case [Parameters].[Parameter 2]&#13;&#10;when 1 then avg([Cost of Living Index])&#13;&#10;WHEN 2 THEN avg([Cost of Living Plus Rent Index])&#13;&#10;WHEN 3 THEN avg([Groceries Index])&#13;&#10;when 4 then avg([Rent Index])&#13;&#10;when 5 then avg([Restaurant Price Index])&#13;&#10;END' />
            </column>
            <column caption='Y Axis Title' datatype='string' name='[Calculation_529172995496595458]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='case [Parameters].[Parameter 2]&#13;&#10;when 1 then &quot;Cost of Living Index&quot;&#13;&#10;WHEN 2 THEN &quot;Cost of Living Plus Rent Index&quot;&#13;&#10;WHEN 3 THEN &quot;Groceries Index&quot;&#13;&#10;When 4 THEN &quot;Local Purchasing Power Index&quot;&#13;&#10;when 5 then &quot;Rent Index&quot;&#13;&#10;when 6 then &quot;Restaurant Price Index&quot;&#13;&#10;END' />
            </column>
            <column caption='View Selected' datatype='string' name='[Calculation_529172995774558221]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 4]' />
            </column>
            <column datatype='real' name='[Cost of Living Index]' role='measure' type='quantitative' />
            <column datatype='real' name='[Cost of Living Plus Rent Index]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Kosovo (Disputed Territory)&quot;' value='&quot;Kosovo&quot;' />
              </semantic-values>
            </column>
            <column datatype='real' name='[Groceries Index]' role='measure' type='quantitative' />
            <column datatype='real' name='[Rent Index]' role='measure' type='quantitative' />
            <column datatype='real' name='[Restaurant Price Index]' role='measure' type='quantitative' />
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_529172995496595458]' derivation='None' name='[none:Calculation_529172995496595458:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_529172995774558221]' derivation='None' name='[none:Calculation_529172995774558221:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_529172995489103873]' derivation='User' name='[usr:Calculation_529172995489103873:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Tooltip (Country)]'>
            <groupfilter function='level-members' level='[Country]' user:ui-action-filter='[Action - Sheet 2]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995774558221:nk]'>
            <groupfilter function='member' level='[none:Calculation_529172995774558221:nk]' member='&quot;View1&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Country:nk]'>
            <groupfilter function='level-members' level='[none:Country:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Country:nk]</column>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Tooltip (Country)]</column>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995774558221:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[usr:Calculation_529172995489103873:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[usr:Calculation_529172995489103873:qk]' scope='rows' value='true' />
            <encoding attr='space' class='1' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[usr:Calculation_529172995489103873:qk]' field-type='quantitative' fold='true' major-origin='0.0' major-show='false' major-spacing='100.0' minor-origin='0.0' minor-show='false' minor-spacing='10.0' scope='rows' type='space' />
            <format attr='title' class='1' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[usr:Calculation_529172995489103873:qk]' scope='rows' value='' />
            <format attr='display' class='1' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[usr:Calculation_529172995489103873:qk]' scope='rows' value='false' />
            <format attr='display' class='0' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[usr:Calculation_529172995489103873:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-orientation' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995496595458:nk]' value='-90' />
            <format attr='font-weight' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995496595458:nk]' value='bold' />
            <format attr='font-size' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995496595458:nk]' value='10' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Country:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.7691160440444946' />
              </style-rule>
            </style>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[usr:Calculation_529172995489103873:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Country:nk]' />
              <text column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[usr:Calculation_529172995489103873:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1' />
                <format attr='mark-markers-mode' value='all' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[usr:Calculation_529172995489103873:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Country:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.49375692009925842' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995496595458:nk] * ([federated.043si4z1bpu3rw1arc7hc12wyv8j].[usr:Calculation_529172995489103873:qk] + [federated.043si4z1bpu3rw1arc7hc12wyv8j].[usr:Calculation_529172995489103873:qk]))</rows>
        <cols>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Tooltip2'>
      <table>
        <view>
          <datasources>
            <datasource caption='Cost_of_living_index' name='federated.043si4z1bpu3rw1arc7hc12wyv8j' />
          </datasources>
          <datasource-dependencies datasource='federated.043si4z1bpu3rw1arc7hc12wyv8j'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Kosovo (Disputed Territory)&quot;' value='&quot;Kosovo&quot;' />
              </semantic-values>
            </column>
            <column datatype='real' name='[Local Purchasing Power Index]' role='measure' type='quantitative' />
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column-instance column='[Local Purchasing Power Index]' derivation='Avg' name='[avg:Local Purchasing Power Index:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Tooltip (Country)]'>
            <groupfilter function='level-members' level='[Country]' user:ui-action-filter='[Action - Tooltip2]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Tooltip (Country)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='1' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]' field-type='quantitative' fold='true' major-origin='0.0' major-show='false' major-spacing='100.0' minor-origin='0.0' minor-show='false' minor-spacing='10.0' scope='rows' type='space' />
            <format attr='title' class='1' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]' scope='rows' value='' />
            <format attr='display' class='1' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]' scope='rows' value='false' />
            <format attr='title' class='0' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]' scope='rows' value='' />
            <encoding attr='space' class='0' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]' field-type='quantitative' major-origin='0.0' major-show='false' major-spacing='100.0' minor-origin='0.0' minor-show='false' minor-spacing='10.0' scope='rows' type='space' />
            <format attr='display' class='0' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]' scope='rows' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <text column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.44977900385856628' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
                <format attr='size' value='0.33983424305915833' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk] + [federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk])</rows>
        <cols>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Year:nk]</cols>
        <page-trail-options enabled='true' lines='true' mark-type='all' />
      </table>
    </worksheet>
    <worksheet name='Top 10 countries'>
      <table>
        <view>
          <datasources>
            <datasource caption='Cost_of_living_index' name='federated.043si4z1bpu3rw1arc7hc12wyv8j' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Enter Year' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;2016&quot;'>
              <calculation class='tableau' formula='&quot;2016&quot;' />
            </column>
            <column alias='Restaurant Price Index' caption='Select a Measure' datatype='integer' datatype-customized='true' name='[Parameter 2]' param-domain-type='list' role='measure' type='quantitative' value='5'>
              <calculation class='tableau' formula='5' />
              <aliases>
                <alias key='1' value='Cost of Living Index' />
                <alias key='2' value='Cost of Living Plus Rent Index' />
                <alias key='3' value='Groceries Index' />
                <alias key='4' value='Rent Index' />
                <alias key='5' value='Restaurant Price Index' />
              </aliases>
            </column>
            <column caption='New York Index' datatype='real' default-format='N' name='[Parameter 3]' param-domain-type='any' role='measure' type='quantitative' value='100.0'>
              <calculation class='tableau' formula='100.0' />
            </column>
            <column alias='Local Purchaing Power' caption='Select View' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;View2&quot;'>
              <calculation class='tableau' formula='&quot;View2&quot;' />
              <aliases>
                <alias key='&quot;View1&quot;' value='Cost of Living' />
                <alias key='&quot;View2&quot;' value='Local Purchaing Power' />
              </aliases>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.043si4z1bpu3rw1arc7hc12wyv8j'>
            <column caption='Selected Year' datatype='string' name='[Calculation_345932786470580225]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if [Year]=[Parameters].[Parameter 1] then [Year] END' />
            </column>
            <column caption='Y Axis Title' datatype='string' name='[Calculation_529172995496595458]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='case [Parameters].[Parameter 2]&#13;&#10;when 1 then &quot;Cost of Living Index&quot;&#13;&#10;WHEN 2 THEN &quot;Cost of Living Plus Rent Index&quot;&#13;&#10;WHEN 3 THEN &quot;Groceries Index&quot;&#13;&#10;When 4 THEN &quot;Local Purchasing Power Index&quot;&#13;&#10;when 5 then &quot;Rent Index&quot;&#13;&#10;when 6 then &quot;Restaurant Price Index&quot;&#13;&#10;END' />
            </column>
            <column caption='View Selected' datatype='string' name='[Calculation_529172995774558221]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 4]' />
            </column>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <semantic-values semantic-role='[City].[Name]'>
                <semantic-value key='&quot;Aachen&quot;' value='&quot;Aachen&quot;' />
                <semantic-value key='&quot;Aalborg&quot;' value='&quot;Aalborg&quot;' />
                <semantic-value key='&quot;Abbotsford&quot;' value='&quot;Abbotsford&quot;' />
                <semantic-value key='&quot;Abu Dhabi&quot;' value='&quot;Abu Dhabi&quot;' />
                <semantic-value key='&quot;Accra&quot;' value='&quot;Accra&quot;' />
                <semantic-value key='&quot;Amsterdam&quot;' value='&quot;Amsterdam&quot;' />
                <semantic-value key='&quot;Bern&quot;' value='&quot;Bern&quot;' />
                <semantic-value key='&quot;Bhopal&quot;' value='&quot;Bhopal&quot;' />
                <semantic-value key='&quot;Bhubaneswar&quot;' value='&quot;Bhubaneswar&quot;' />
                <semantic-value key='&quot;Bilbao&quot;' value='&quot;Bilbao&quot;' />
                <semantic-value key='&quot;Bogota&quot;' value='&quot;Bogota&quot;' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Latitude]'>
                <semantic-value key='&quot;Aberdeen&quot;' value='57.149700000000003' />
                <semantic-value key='&quot;Ad Dammam&quot;' value='26.4207' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Longitude]'>
                <semantic-value key='&quot;Aberdeen&quot;' value='2.0943000000000001' />
                <semantic-value key='&quot;Ad Dammam&quot;' value='50.088799999999999' />
              </semantic-values>
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Kosovo (Disputed Territory)&quot;' value='&quot;Kosovo&quot;' />
              </semantic-values>
            </column>
            <column datatype='real' name='[Local Purchasing Power Index]' role='measure' type='quantitative' />
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column-instance column='[Local Purchasing Power Index]' derivation='Avg' name='[avg:Local Purchasing Power Index:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_345932786470580225]' derivation='None' name='[none:Calculation_345932786470580225:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_529172995774558221]' derivation='None' name='[none:Calculation_529172995774558221:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Action (Country)]'>
            <groupfilter function='level-members' level='[Country]' user:ui-action-filter='[Action1]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Action (Y Axis Title,City)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Calculation_529172995496595458]' />
              <groupfilter function='level-members' level='[City]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_345932786470580225:nk]' filter-group='3'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2015&quot;' />
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2016&quot;' />
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2017&quot;' />
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2018&quot;' />
              <groupfilter function='member' level='[none:Calculation_345932786470580225:nk]' member='&quot;2019&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995774558221:nk]'>
            <groupfilter function='member' level='[none:Calculation_529172995774558221:nk]' member='&quot;View2&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Country:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='AVG([Local Purchasing Power Index])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Country:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <columns>
            <shelf-sort direction='DESC' measure-to-sort-by='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]'>
              <dimensions-to-sort>
                <dimension>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Country:nk]</dimension>
              </dimensions-to-sort>
            </shelf-sort>
          </columns>
          <slices>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Country:nk]</column>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995774558221:nk]</column>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Action (Country)]</column>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Action (Y Axis Title,City)]</column>
            <column>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_345932786470580225:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]' field-type='quantitative' major-origin='0.0' major-show='false' major-spacing='100.0' scope='rows' type='space' />
            <format attr='width' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]' value='20' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]' palette='blue_teal_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]' />
            </encodings>
            <reference-line axis-column='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='none' probability='95' scope='per-pane' value-column='[Parameters].[Parameter 3]' z-order='1' />
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Country:&#9;</run>
                <run bold='true'>&lt;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Country:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Avg. Local Purchasing Power Index:&#9;</run>
                <run bold='true'>&lt;[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
          </pane>
        </panes>
        <rows>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]</rows>
        <cols>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Country:nk]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Dashboard 1'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1' fontsize='24'>Cost of Living Index around the World</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
        <style-rule element='table'>
          <format attr='background-color' value='#00000000' />
        </style-rule>
        <style-rule element='dash-title'>
          <format attr='color' value='#333333' />
          <format attr='font-family' value='Century Gothic' />
          <format attr='text-align' value='auto' />
          <format attr='background-color' value='#00000000' />
          <format attr='border-color' value='#76b7b2' />
          <format attr='border-width' value='5' />
          <format attr='border-style' value='none' />
        </style-rule>
      </style>
      <size sizing-mode='automatic' />
      <datasources>
        <datasource name='Parameters' />
      </datasources>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Enter Year' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;2016&quot;'>
          <calculation class='tableau' formula='&quot;2016&quot;' />
          <members>
            <member value='&quot;2015&quot;' />
            <member value='&quot;2016&quot;' />
            <member value='&quot;2017&quot;' />
            <member value='&quot;2018&quot;' />
            <member value='&quot;2019&quot;' />
          </members>
        </column>
        <column alias='Restaurant Price Index' caption='Select a Measure' datatype='integer' datatype-customized='true' name='[Parameter 2]' param-domain-type='list' role='measure' type='quantitative' value='5'>
          <calculation class='tableau' formula='5' />
          <aliases>
            <alias key='1' value='Cost of Living Index' />
            <alias key='2' value='Cost of Living Plus Rent Index' />
            <alias key='3' value='Groceries Index' />
            <alias key='4' value='Rent Index' />
            <alias key='5' value='Restaurant Price Index' />
          </aliases>
          <members>
            <member alias='Cost of Living Index' value='1' />
            <member alias='Cost of Living Plus Rent Index' value='2' />
            <member alias='Groceries Index' value='3' />
            <member alias='Rent Index' value='4' />
            <member alias='Restaurant Price Index' value='5' />
          </members>
        </column>
        <column alias='Local Purchaing Power' caption='Select View' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;View2&quot;'>
          <calculation class='tableau' formula='&quot;View2&quot;' />
          <aliases>
            <alias key='&quot;View1&quot;' value='Cost of Living' />
            <alias key='&quot;View2&quot;' value='Local Purchaing Power' />
          </aliases>
          <members>
            <member alias='Cost of Living' value='&quot;View1&quot;' />
            <member alias='Local Purchaing Power' value='&quot;View2&quot;' />
          </members>
        </column>
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='28' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='53' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='6620' id='54' type='title' w='100000' x='0' y='0'>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='4' />
              </zone-style>
            </zone>
            <zone h='93380' id='36' param='horz' type='layout-flow' w='100000' x='0' y='6620'>
              <zone h='93380' id='34' type='layout-basic' w='84128' x='0' y='6620'>
                <zone h='46725' id='27' param='vert' type='layout-flow' w='33802' x='50326' y='53275'>
                  <zone h='46725' id='30' param='vert' type='layout-flow' w='33802' x='50326' y='53275'>
                    <zone h='1858' id='42' name='Cities vx index' w='33148' x='50653' y='53856'>
                      <layout-cache has-max-size-h='true' maxheight='16' minheight='16' type-h='scalable' type-w='fixed' />
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone h='43705' id='49' name='Top 10 countries' show-title='false' w='33148' x='50653' y='55714'>
                      <layout-cache minheight='260' type-h='scalable' type-w='fixed' />
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone-style>
                      <format attr='border-color' value='#4e79a7' />
                      <format attr='border-style' value='solid' />
                      <format attr='border-width' value='5' />
                    </zone-style>
                  </zone>
                </zone>
                <zone h='93380' id='31' param='vert' type='layout-flow' w='50326' x='0' y='6620'>
                  <zone h='116' id='33' name='Cost index by Countries' show-title='false' w='49672' x='327' y='7201'>
                    <layout-cache has-max-size-h='true' maxheight='1' minheight='1' type-h='scalable' type-w='fixed' />
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='92102' id='40' name='Local Purchasing Index by Countries' show-title='false' w='49672' x='327' y='7317'>
                    <layout-cache minheight='201' type-h='scalable' type-w='fixed' />
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone-style>
                    <format attr='border-color' value='#e15759' />
                    <format attr='border-style' value='solid' />
                    <format attr='border-width' value='5' />
                  </zone-style>
                </zone>
                <zone h='46655' id='55' param='horz' type='layout-flow' w='33802' x='50326' y='6620'>
                  <zone h='45493' id='58' name='City Affordability' show-title='false' w='32495' x='50653' y='7201'>
                    <layout-cache has-max-size-w='true' maxwidth='718' minwidth='718' type-h='fixed' type-w='scalable' />
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='45493' id='56' name='Distribuation of Cost of Living Rent' show-title='false' w='653' x='83148' y='7201'>
                    <layout-cache cell-count-w='1' minheight='101' type-h='scalable' type-w='cell' />
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone-style>
                    <format attr='border-color' value='#59a14f' />
                    <format attr='border-style' value='solid' />
                    <format attr='border-width' value='5' />
                  </zone-style>
                </zone>
              </zone>
              <zone fixed-size='243' h='93380' id='35' is-fixed='true' param='vert' type='layout-flow' w='15872' x='84128' y='6620'>
                <zone h='17538' id='38' mode='list' param='[Parameters].[Parameter 2]' type='paramctrl' w='15872' x='84128' y='6620'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='6504' id='39' mode='compact' param='[Parameters].[Parameter 4]' type='paramctrl' w='15872' x='84128' y='24158'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='3600' id='57' name='Distribuation of Cost of Living Rent' pane-specification-id='1' param='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[:Measure Names]' type='color' w='15872' x='84128' y='30662'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='6504' id='59' mode='compact' param='[Parameters].[Parameter 1]' type='paramctrl' w='15872' x='84128' y='34262'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.25' source-height='37'>
    <window class='worksheet' name='Cost index by Countries'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Parameter 2]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 4]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_345932786470580225:nk]</field>
            <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995484041216:nk]</field>
            <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995774558221:nk]</field>
            <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Country:nk]</field>
            <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Year:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{978F9B97-8380-4346-92F8-3238B4235A27}' />
    </window>
    <window class='worksheet' name='Tooltip1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Country:nk]' type='filter' values='cascading' />
            <card mode='compact' param='[Parameters].[Parameter 2]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 4]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995496595458:nk]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;Local Purchasing Power Index&quot;</bucket>
                </multibucket>
                <axis>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[usr:Calculation_529172995489103873:qk]</axis>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995496595458:nk]</field>
            <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995774558221:nk]</field>
            <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Country:nk]</field>
            <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Year:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F0000976-253D-4A0D-A773-B30023134DB1}' />
    </window>
    <window class='worksheet' name='Cities vx index'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995774558221:nk]' type='filter' />
            <card mode='checkdropdown' param='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Country:nk]' type='filter' values='cascading' />
            <card mode='compact' param='[Parameters].[Parameter 2]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 3]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 4]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995496595458:nk]</field>
            <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995774558221:nk]</field>
            <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:City:nk]</field>
            <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F81BC755-3291-4A3A-A7ED-91A55FEBFCE7}' />
    </window>
    <window class='worksheet' name='Distribuation of Cost of Living Rent'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[:Measure Names]' type='color' />
            <card mode='compact' param='[Parameters].[Parameter 4]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[:Measure Names]</field>
            <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995774558221:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{15BF3DD9-59B5-4B67-9C58-49CF6CE27143}' />
    </window>
    <window class='worksheet' name='Local Purchasing Index by Countries'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]' type='color' />
            <card mode='compact' param='[Parameters].[Parameter 4]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]</field>
            <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995484041216:nk]</field>
            <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995774558221:nk]</field>
            <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Country:nk]</field>
            <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Year:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{00DAFD8F-5BAF-4A0D-8EF7-834E581FBD3F}' />
    </window>
    <window class='worksheet' name='Top 10 countries'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]' type='color' />
            <card mode='compact' param='[Parameters].[Parameter 4]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[avg:Local Purchasing Power Index:qk]</field>
            <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995774558221:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{4CF31D47-F214-40F9-B0EE-6A2A64E6DCAA}' />
    </window>
    <window class='worksheet' name='Tooltip2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Year:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{DD4CFC59-A7C8-46EB-8F75-60386D002498}' />
    </window>
    <window class='worksheet' name='City Affordability'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_345932786296545280:nk]' type='color' />
            <card mode='compact' param='[Parameters].[Parameter 4]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_345932786296545280:nk]</field>
            <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995484041216:nk]</field>
            <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995774558221:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{BB257D91-E1DC-4EB1-89AB-52036E38627B}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Cities vx index'>
          <zoom type='entire-view' />
          <selection-collection>
            <tuple-selection>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields>
                      <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:City:nk]</field>
                    </x-fields>
                    <y-fields>
                      <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995496595458:nk]</field>
                      <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[usr:Calculation_529172995489103873:qk]</field>
                    </y-fields>
                  </pane-descriptor>
                  <columns>
                    <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Calculation_529172995496595458:nk]</field>
                    <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:City:nk]</field>
                    <field>[Parameters].[Parameter 3]</field>
                    <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[usr:Calculation_529172995489103873:qk]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>&quot;Cost of Living Index&quot;</value>
                  <value>&quot;Darwin&quot;</value>
                  <value>100.0</value>
                  <value>124.61</value>
                </tuple>
              </tuple-reference>
            </tuple-selection>
          </selection-collection>
        </viewpoint>
        <viewpoint name='City Affordability'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Cost index by Countries'>
          <zoom type='entire-view' />
          <selection-collection>
            <tuple-selection>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields>
                      <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Longitude (generated)]</field>
                    </x-fields>
                    <y-fields>
                      <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Latitude (generated)]</field>
                    </y-fields>
                  </pane-descriptor>
                  <columns>
                    <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[none:Country:nk]</field>
                    <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Geometry (generated)]</field>
                    <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Latitude (generated)]</field>
                    <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[Longitude (generated)]</field>
                    <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[usr:Calculation_529172995489103873:qk]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>&quot;India&quot;</value>
                  <value>&quot;MULTIPOLYGON(((77.9244 35.4974,78.0264 35.4694,78.0761 35.4959,78.0762 35.4959,78.0911 35.4687,78.1072 35.4392,78.0906 35.4226,78.0749 35.4078,78.0226 35.3584,78.0071 35.2652,78.003 35.2406,78.003 35.2405,78.1093 35.1146,78.1465 35.0706,78.174 34.9455,78.1774 34.9301,78.1774 34.93,78.2371 34.8697,78.1857 34.7942,78.1967 34.7586,78.2084 34.721,78.2084 34.7209,78.2086 34.7208,78.2711 34.7012,78.29 34.6152,78.29 34.6151,78.4592 34.5691,78.552 34.5713,78.5521 34.5713,78.5634 34.5094,78.608 34.5299,78.6375 34.5434,78.71 34.526,78.7386 34.4596,78.7387 34.4595,78.932 34.3802,79.0067 34.4067,79.0068 34.4067,79.0537 34.3087,79.053 34.3086,78.9849 34.3001,78.926 34.1544,78.8618 34.1657,78.8058 34.1313,78.7425 34.0924,78.6571 34.0743,78.657 34.0705,78.6563 34.032,78.6652 34.0287,78.7425 34.0003,78.7624 33.8506,78.7764 33.745,78.7175 33.6233,78.7235 33.6016,78.7326 33.569,78.7805 33.5032,78.8361 33.4269,78.9351 33.3875,78.9366 33.3869,78.9625 33.3677,79.0143 33.3295,79.0204 33.325,79.0716 33.2243,79.0717 33.2242,79.0999 33.2094,79.1517 33.1821,79.1519 33.182,79.1519 33.1819,79.148 33.0259,79.2288 32.8964,79.2334 32.7839,79.2683 32.6839,79.2757 32.5568,79.2485 32.5167,79.2469 32.5162,79.1315 32.4812,79.1043 32.374,79.1028 32.374,78.9903 32.3708,78.9683 32.3357,78.9111 32.3719,78.8204 32.4293,78.8135 32.4336,78.8135 32.4337,78.7576 32.5673,78.7667 32.5861,78.7814 32.6163,78.7812 32.6165,78.723 32.6743,78.6637 32.6572,78.6109 32.6002,78.5465 32.6189,78.5163 32.6145,78.4147 32.5661,78.4124 32.5175,78.4209 32.5067,78.4213 32.5063,78.4525 32.4666,78.4721 32.4417,78.4885 32.2766,78.4284 32.2089,78.4556 32.1363,78.4557 32.1361,78.5083 32.15,78.5658 32.0862,78.5695 32.0635,78.5705 32.0579,78.5714 32.0525,78.5746 32.0328,78.5747 32.0327,78.765 31.9471,78.7676 31.9457,78.7679 31.9455,78.7158 31.8796,78.665 31.8543,78.6521 31.7935,78.6521 31.7934,78.7162 31.7679,78.7163 31.7679,78.7603 31.6752,78.7603 31.6751,78.8464 31.607,78.8466 31.6069,78.7311 31.5325,78.7203 31.5081,78.7258 31.4839,78.7258 31.4838,78.7968 31.4441,78.753 31.3849,78.7684 31.3263,78.7704 31.3235,78.7705 31.3234,78.8837 31.2862,78.9908 31.1661,78.9924 31.1641,79.0035 31.1238,79.0062 31.1139,79.0064 31.1135,79.0006 31.052,79.0006 31.0519,79.0506 31.0364,79.0855 31.0054,79.0922 30.9995,79.1169 31.0054,79.169 31.018,79.1773 31.0143,79.2061 31.0013,79.2062 31.0012,79.2202 30.9555,79.2202 30.9554,79.2757 30.9595,79.3093 30.962,79.3087 31.0146,79.3229 31.0241,79.3355 31.0325,79.3892 31.0684,79.4124 31.0723,79.4196 31.0629,79.4209 31.0532,79.4209 31.053,79.5069 31.0324,79.5526 30.958,79.6007 30.9389,79.6009 30.9388,79.687 30.9754,79.7626 30.9353,79.8286 30.8508,79.8287 30.8506,79.8366 30.8505,79.8628 30.8606,79.8693 30.8599,79.88 30.8628,79.8883 30.8593,79.8884 30.8593,79.9013 30.8165,79.9668 30.7639,79.967 30.7638,79.9858 30.7107,79.9944 30.6957,80.0171 30.6561,80.0732 30.595,80.0733 30.595,80.2079 30.5883,80.2081 30.5883,80.3154 30.5645,80.3454 30.5205,80.3455 30.5203,80.4104 30.5247,80.5485 30.4485,80.5743 30.4587,80.6066 30.4715,80.7073 30.4174,80.7343 30.401,80.7419 30.3922,80.8015 30.3233,80.8016 30.3232,80.881 30.3084,80.9073 30.3035,80.9269 30.2672,80.9567 30.2616,81.0312 30.2476,81.035 30.1978,80.9399 30.1632,80.8726 30.1388,80.7938 30.0683,80.6717 29.9591,80.5984 29.9568,80.5523 29.8495,80.4911 29.7967,80.4292 29.8042,80.3635 29.7453,80.4059 29.598,80.3378 29.5089,80.2502 29.4492,80.2515 29.4438,80.2774 29.3389,80.3125 29.3123,80.2686 29.142,80.1799 29.1365,80.1444 29.1002,80.1312 29.0047,80.0912 28.9419,80.053 28.8819,80.0772 28.8288,80.0797 28.8233,80.1928 28.7663,80.2576 28.752,80.3309 28.6751,80.3729 28.6311,80.4553 28.6201,80.5542 28.6916,80.8454 28.4938,80.9717 28.4334,81.0368 28.4144,81.1969 28.3675,81.3123 28.1917,81.4441 28.1587,81.4826 28.0818,81.7023 27.9884,81.7453 27.955,81.7531 27.9489,81.8012 27.9115,81.9166 27.8621,81.966 27.928,82.0704 27.9225,82.2067 27.8363,82.2265 27.8238,82.4439 27.6863,82.7076 27.7137,82.7625 27.505,82.9218 27.505,82.9987 27.4556,83.191 27.4556,83.2954 27.3347,83.2992 27.3372,83.4107 27.4116,83.3888 27.483,83.625 27.4665,83.8612 27.3567,83.865 27.3628,83.9161 27.4446,84.0205 27.4336,84.1029 27.5215,84.2567 27.4446,84.2842 27.3896,84.6083 27.3402,84.6907 27.2193,84.6467 27.0436,84.7641 27.0127,84.9599 26.9612,84.9654 26.9172,85.1851 26.8733,85.2071 26.7689,85.2548 26.7602,85.3279 26.7469,85.4598 26.7909,85.6191 26.8843,85.7179 26.8183,85.7289 26.659,85.8204 26.6153,85.8214 26.6148,85.8553 26.5986,86.0311 26.67,86.1519 26.6151,86.3387 26.6096,86.5364 26.5382,86.7232 26.4283,86.7282 26.429,86.8386 26.4448,86.9649 26.5217,87.029 26.5644,87.0638 26.5876,87.0731 26.532,87.0858 26.4558,87.1407 26.4118,87.2341 26.4173,87.3495 26.3624,87.3659 26.4063,87.4923 26.4393,87.5802 26.3954,87.6022 26.3844,87.6509 26.4087,87.6681 26.4173,87.756 26.3953,87.7889 26.4668,87.8878 26.4832,88.0142 26.3624,88.0911 26.4228,88.101 26.5229,88.102 26.5327,88.1053 26.5403,88.1954 26.7524,88.1295 26.9831,87.9867 27.115,88.005 27.2108,88.0087 27.2303,88.0581 27.3402,88.0416 27.4885,88.1127 27.6105,88.1185 27.6204,88.1954 27.8566,88.135 27.8785,88.135 27.9135,88.135 27.95,88.251 27.9422,88.4093 27.9821,88.5448 28.0344,88.5652 28.0903,88.6332 28.1228,88.6671 28.0769,88.6672 28.0767,88.7548 28.0804,88.8362 28.0154,88.8817 27.8916,88.8571 27.8155,88.8485 27.668,88.7741 27.544,88.7828 27.4539,88.7987 27.4322,88.8379 27.3792,88.8879 27.3403,88.9232 27.325,88.876 27.2652,88.8056 27.2471,88.7565 27.1487,88.7564 27.1486,88.7548 27.1453,88.7905 27.1337,88.8715 27.1072,88.8711 26.9912,88.8711 26.9886,88.8811 26.9843,89.0908 26.8952,89.1348 26.8128,89.3655 26.8568,89.4809 26.8073,89.6347 26.7799,89.6347 26.7524,89.8544 26.714,89.8551 26.7141,89.8609 26.7152,90.1895 26.7744,90.2225 26.8568,90.4147 26.9062,90.431 26.8943,90.4455 26.8838,90.5356 26.8183,90.6949 26.7744,90.9421 26.7909,90.9665 26.7954,90.969 26.7959,91.0904 26.8183,91.2607 26.8073,91.3321 26.7799,91.4144 26.8401,91.5354 26.8183,91.6776 26.815,91.6828 26.8149,91.7058 26.8144,91.7235 26.814,91.825 26.8636,91.8598 26.9133,91.9474 26.8952,92.0078 26.8513,92.1036 26.8692,92.1064 26.8866,92.1074 26.8931,92.1151 26.9405,92.1174 26.9546,92.0322 27.0766,92.0364 27.1804,92.1244 27.2771,92.0269 27.4557,92.0145 27.4786,92.0052 27.4782,91.8321 27.4715,91.6707 27.4925,91.6238 27.5139,91.6125 27.5437,91.5944 27.5421,91.566 27.5839,91.5845 27.6084,91.5623 27.6322,91.5947 27.6704,91.6433 27.761,91.8503 27.7625,91.9236 27.7179,92.2129 27.8727,92.2732 27.8711,92.2936 27.8705,92.2937 27.8705,92.3193 27.7974,92.3194 27.7972,92.4493 27.8275,92.4696 27.8322,92.478 27.8342,92.6463 27.9126,92.7251 27.9797,92.7257 27.9802,92.7326 27.9861,92.7318 28.0548,92.7317 28.0548,92.6585 28.0744,92.6585 28.0745,92.6774 28.1507,92.7907 28.1877,92.9214 28.2006,92.932 28.2489,93.024 28.2989,93.1262 28.3545,93.1473 28.366,93.1514 28.3798,93.185 28.4944,93.3308 28.6062,93.3606 28.622,93.4486 28.6689,93.4521 28.6693,93.6231 28.6885,93.707 28.6644,93.7901 28.7369,93.869 28.752,93.8966 28.7573,93.9041 28.7635,93.9043 28.7636,93.9751 28.8215,94.0745 28.864,94.136 28.8902,94.1369 28.8912,94.1783 28.9363,94.1878 28.9358,94.2607 28.9318,94.2822 28.965,94.3302 29.039,94.2758 29.1131,94.2931 29.1523,94.3793 29.1538,94.4571 29.2128,94.5409 29.2196,94.6935 29.3178,94.7257 29.2688,94.7515 29.2295,94.7516 29.2294,94.9941 29.144,95.0387 29.143,95.0968 29.1418,95.1035 29.1326,95.1358 29.0886,95.136 29.0885,95.2493 29.0788,95.2789 29.1137,95.3016 29.1405,95.375 29.1375,95.3871 29.137,95.4221 29.1825,95.4581 29.1414,95.4583 29.1413,95.5097 29.1383,95.5099 29.1399,95.5156 29.1906,95.567 29.1765,95.6874 29.2277,95.7085 29.2071,95.7583 29.3181,95.7857 29.3309,95.8228 29.3482,95.8258 29.3444,95.8485 29.3163,95.8487 29.3161,95.9203 29.3404,95.9986 29.367,96.0434 29.4258,96.0608 29.4486,96.0868 29.4479,96.1079 29.4473,96.1797 29.3555,96.1906 29.3049,96.2516 29.236,96.2517 29.2359,96.3186 29.2614,96.3757 29.2832,96.3837 29.2713,96.3967 29.2517,96.3852 29.2342,96.3459 29.174,96.2775 29.1589,96.2231 29.1469,96.1994 29.0943,96.1733 29.0731,96.1546 29.0578,96.1614 29.0451,96.1926 28.9876,96.1829 28.9789,96.1551 28.954,96.1893 28.9008,96.1894 28.9006,96.1945 28.9037,96.2318 28.9266,96.3215 29.0168,96.3483 29.0336,96.3539 29.0371,96.4435 29.0388,96.4635 29.0451,96.4704 29.0472,96.5034 29.0575,96.5144 29.0609,96.5178 29.062,96.5181 29.0621,96.4964 29.0153,96.4938 29.0096,96.4811 28.9821,96.5112 28.9494,96.5414 28.9167,96.5418 28.9016,96.5423 28.8788,96.5724 28.8417,96.604 28.8029,96.6226 28.7799,96.6148 28.7585,96.603 28.7262,96.5713 28.7208,96.538 28.7151,96.5352 28.7147,96.5317 28.7141,96.4979 28.6826,96.4892 28.635,96.4879 28.6278,96.4675 28.6104,96.4157 28.5662,96.3562 28.5487,96.3532 28.5463,96.3335 28.5299,96.3441 28.5124,96.3663 28.4756,96.312 28.4382,96.2782 28.415,96.3143 28.3939,96.3422 28.3911,96.3718 28.3883,96.3993 28.3675,96.4268 28.3468,96.4626 28.4145,96.4911 28.4179,96.5334 28.4229,96.5809 28.4565,96.634 28.4543,96.6712 28.4527,96.6776 28.4491,96.755 28.4049,96.7551 28.4048,96.7654 28.3692,96.7654 28.369,96.8 28.3635,96.8495 28.3556,96.8737 28.361,96.9083 28.3688,96.9084 28.3688,96.9124 28.3515,96.9178 28.3276,96.9179 28.3275,97.0002 28.2951,97.0171 28.3088,97.0904 28.3684,97.1361 28.3697,97.1362 28.3697,97.1385 28.3659,97.1433 28.3579,97.1554 28.3378,97.1555 28.3377,97.2911 28.2398,97.2985 28.2356,97.3473 28.2081,97.3347 28.1438,97.33 28.142,97.3303 28.1217,97.3305 28.1112,97.3254 28.0818,97.3657 28.0448,97.379 28.0282,97.3931 28.0108,97.3643 27.9602,97.3785 27.8924,97.3783 27.8922,97.3244 27.8986,97.2665 27.9055,97.2494 27.9075,97.2065 27.8586,97.1016 27.739,97.0525 27.7443,96.9951 27.6711,96.9798 27.6619,96.9185 27.6253,96.9121 27.6214,96.8991 27.6137,96.9067 27.5909,96.9346 27.5072,96.9158 27.455,96.9361 27.4262,96.9629 27.3882,97.0122 27.3182,97.0206 27.3092,97.0847 27.2409,97.177 27.1424,97.1454 27.0925,97.1387 27.0929,97.1371 27.0929,97.0818 27.0959,97.0767 27.0962,97.0109 27.1446,96.9729 27.1546,96.9307 27.1656,96.8901 27.1763,96.8886 27.2466,96.8877 27.2475,96.8874 27.2479,96.805 27.3357,96.7972 27.344,96.7851 27.3485,96.7088 27.3765,96.7048 27.3714,96.6999 27.3653,96.6939 27.3578,96.6763 27.3357,96.6216 27.3626,96.6112 27.3677,96.6068 27.3636,96.6005 27.3578,96.5642 27.3238,96.5288 27.2908,96.4636 27.3003,96.4331 27.3047,96.3146 27.2963,96.25 27.2743,96.1954 27.2558,96.1382 27.2364,96.1015 27.2239,96.0454 27.1919,95.9465 27.0545,95.9359 27.0515,95.8092 27.0161,95.8073 27.0134,95.7837 26.9802,95.7342 26.9103,95.7237 26.8954,95.7175 26.8867,95.7158 26.8843,95.7139 26.8854,95.6774 26.9062,95.6729 26.8999,95.6114 26.8128,95.6071 26.8126,95.6064 26.8126,95.5064 26.8075,95.5016 26.8073,95.4486 26.7159,95.4411 26.703,95.4222 26.6962,95.3829 26.682,95.3047 26.6538,95.3038 26.6535,95.2544 26.6755,95.2447 26.6699,95.2414 26.668,95.2385 26.6663,95.2011 26.6447,95.15 26.6151,95.1489 26.6131,95.1475 26.6104,95.0731 26.4723,95.0984 26.4355,95.1335 26.3844,95.13 26.3243,95.1289 26.3058,95.1224 26.1961,95.117 26.1042,95.1194 26.1032,95.183 26.0767,95.1819 26.0754,95.0734 25.9452,95.0206 25.8818,95.0182 25.879,95.0182 25.8788,95.0253 25.8433,95.0413 25.7632,95.0456 25.7416,94.9412 25.6702,94.8987 25.5693,94.8973 25.5659,94.892 25.5616,94.8094 25.4944,94.7366 25.4779,94.6886 25.467,94.6883 25.4662,94.6797 25.4434,94.6765 25.4348,94.6721 25.423,94.6255 25.3415,94.5842 25.2692,94.5858 25.2632,94.6062 25.1868,94.738 25.1374,94.738 25.1265,94.738 25.0261,94.738 25,94.7017 24.9426,94.6336 24.8352,94.6101 24.7268,94.6062 24.7089,94.5915 24.7089,94.5633 24.7089,94.5533 24.7089,94.5457 24.7089,94.5073 24.5935,94.4578 24.5716,94.4576 24.5711,94.4537 24.5633,94.4186 24.4909,94.4115 24.4765,94.4036 24.4602,94.4027 24.4583,94.3408 24.331,94.3234 24.2952,94.2973 24.2416,94.2851 24.2165,94.2601 24.1651,94.2546 24.0827,94.2245 24.015,94.19 23.9375,94.1863 23.9292,94.161 23.8721,94.146 23.8384,94.1447 23.8355,94.1437 23.8362,94.1084 23.8619,94.0749 23.8863,94.0431 23.9094,94.0416 23.9105,94.0239 23.9234,93.9233 23.9443,93.8985 23.9495,93.892 23.9508,93.8195 23.9267,93.8096 23.9234,93.7871 23.9572,93.7697 23.9833,93.7561 24.0036,93.7547 24.0058,93.7516 24.0059,93.7448 24.0062,93.6283 24.0112,93.627 24.0093,93.5954 23.9618,93.5417 23.9663,93.468 23.9724,93.4635 23.9728,93.4605 23.9788,93.4086 24.0827,93.4036 24.0795,93.3439 24.041,93.334 24.0347,93.3317 24.0332,93.3889 23.9292,93.3902 23.9268,93.3921 23.9234,93.3921 23.7749,93.3921 23.7586,93.3923 23.7582,93.4361 23.6816,93.4354 23.6779,93.435 23.6759,93.4235 23.6143,93.4053 23.5173,93.3909 23.4404,93.3776 23.3693,93.3702 23.3301,93.3702 23.258,93.3702 23.1588,93.3702 23.1433,93.3459 23.09,93.3385 23.0736,93.3352 23.0664,93.3152 23.0224,93.3042 23.024,93.208 23.0382,93.189 23.041,93.1823 23.042,93.139 23.0483,93.1284 23.0499,93.129 23.0458,93.1356 22.9996,93.137 22.9898,93.1445 22.9373,93.1449 22.9346,93.0955 22.8027,93.0955 22.7963,93.0955 22.7931,93.0955 22.7171,93.0955 22.6917,93.0955 22.6764,93.1002 22.6693,93.1394 22.6104,93.1332 22.5948,93.1233 22.5701,93.112 22.5418,93.1116 22.5407,93.1065 22.528,93.136 22.4788,93.1568 22.4441,93.1856 22.3962,93.1889 22.3907,93.1999 22.2589,93.1614 22.1984,93.1548 22.1987,93.1095 22.2009,93.1047 22.2011,93.046 22.2039,93.047 22.1941,93.057 22.0996,93.0554 22.0979,92.9971 22.0396,92.9966 22.0391,92.9587 22.0291,92.9486 22.0265,92.8952 22.0125,92.8922 22.0117,92.8916 22.0123,92.8883 22.0156,92.8415 22.0624,92.8215 22.0824,92.8117 22.0922,92.8043 22.0996,92.7 22.1545,92.6973 22.1372,92.6812 22.0328,92.6781 22.0124,92.678 22.0117,92.6067 21.9732,92.6066 21.9732,92.5626 22.127,92.6066 22.1435,92.5462 22.4676,92.5297 22.6544,92.4821 22.7353,92.4818 22.7357,92.4747 22.7478,92.4418 22.8851,92.3759 22.9291,92.3811 23.0646,92.3819 23.0664,92.3812 23.0677,92.3814 23.0719,92.3484 23.2367,92.359 23.279,92.3594 23.2806,92.3759 23.3466,92.3264 23.4235,92.266 23.7146,92.263 23.7149,92.1801 23.7224,92.1687 23.7235,92.1451 23.7256,92.0737 23.6432,91.9364 23.6542,91.9639 23.4894,91.9364 23.429,91.9007 23.4185,91.843 23.4015,91.7716 23.2696,91.8038 23.0993,91.81 23.0664,91.7112 22.984,91.5738 22.962,91.5244 23.0499,91.4969 23.1872,91.4145 23.2587,91.398 23.0554,91.3486 23.0829,91.3211 23.2477,91.3118 23.2761,91.3108 23.2795,91.2442 23.4839,91.1673 23.5938,91.1673 23.7476,91.2113 23.7366,91.2138 23.7479,91.2607 23.9563,91.3211 23.9838,91.3706 23.9783,91.4145 24.1101,91.4909 24.0858,91.5354 24.0717,91.6398 24.1046,91.6398 24.1651,91.759 24.1552,91.7617 24.1549,91.9006 24.1433,91.9034 24.1431,91.9639 24.3683,92.0728 24.3725,92.1067 24.3738,92.1451 24.4178,92.1451 24.5331,92.1946 24.5716,92.1979 24.5808,92.204 24.5978,92.2715 24.7858,92.255 24.8407,92.4912 24.8682,92.4907 24.8753,92.4905 24.8776,92.4857 24.9396,92.4143 25.0165,92.3954 25.0246,92.3826 25.0302,92.1796 25.1176,92.0272 25.1832,92.0188 25.1868,92.0166 25.1866,91.7002 25.1539,91.6013 25.1648,91.475 25.1374,91.4179 25.155,91.3678 25.1704,91.2607 25.2033,91.0684 25.1923,90.9903 25.1743,90.9644 25.1683,90.9256 25.1594,90.7718 25.1813,90.6674 25.1484,90.5136 25.1703,90.451 25.1463,90.4422 25.1429,90.2854 25.1815,90.1071 25.2253,89.961 25.2984,89.9533 25.3022,89.8324 25.3077,89.8215 25.4285,89.8345 25.4675,89.8366 25.474,89.8544 25.5274,89.8764 25.6428,89.8215 25.7307,89.8379 25.8845,89.8819 25.9339,89.7446 26.1591,89.724 26.1765,89.717 26.1824,89.6731 26.2196,89.5907 26.1536,89.6402 26.0712,89.5358 25.9998,89.415 26.0383,89.36 26.0108,89.1732 26.1317,89.1207 26.2541,89.0908 26.3239,89.1018 26.3953,89.0877 26.3993,89.0865 26.3997,88.948 26.4393,88.9344 26.4035,88.8711 26.236,88.7594 26.3012,88.7577 26.3022,88.7393 26.3129,88.6843 26.4118,88.525 26.4832,88.4339 26.56,88.4247 26.5677,88.4207 26.5711,88.3463 26.4967,88.3328 26.4832,88.4811 26.4613,88.525 26.3734,88.4371 26.3569,88.3547 26.28,88.3492 26.2196,88.179 26.1427,88.1735 26.0328,88.0911 25.9174,88.113 25.8021,88.2723 25.7801,88.4481 25.6702,88.4426 25.6043,88.4516 25.5953,88.4574 25.5895,88.536 25.5109,88.7008 25.478,88.8052 25.5329,88.8327 25.3736,88.9323 25.3511,88.9535 25.1813,88.8382 25.2088,88.7997 25.1758,88.7063 25.2088,88.5635 25.1758,88.4429 25.1959,88.4425 25.196,88.4316 25.1978,88.4382 25.1093,88.4426 25.0498,88.4422 25.0489,88.3777 24.9475,88.3273 24.8682,88.2284 24.9561,88.1405 24.9341,88.1625 24.8462,88.0636 24.7638,88.0306 24.6869,88.0488 24.6527,88.0505 24.6496,88.1185 24.5221,88.3438 24.4397,88.547 24.3134,88.6843 24.3299,88.7448 24.2859,88.7008 24.1211,88.7115 24.1029,88.7124 24.1014,88.7558 24.0277,88.7503 23.9453,88.6679 23.8629,88.5964 23.8574,88.5855 23.6762,88.6624 23.5498,88.7667 23.4784,88.7667 23.363,88.7283 23.2587,88.7322 23.2581,88.8186 23.2458,88.9206 23.2312,88.948 23.1763,88.8821 23.0444,88.9151 22.9181,88.97 22.8467,88.926 22.7313,89.07 22.2054,89.0854 22.149,89.0469 22.0776,89.0765 22.0277,89.0834 21.9519,89.0367 21.9227,89.0251 21.8898,89.0436 21.8367,89.0306 21.7869,89.0825 21.7307,89.1208 21.6609,89.0758 21.6265,88.999 21.6051,88.9202 21.6343,88.889 21.6576,88.7867 21.583,88.7351 21.5774,88.6481 21.5976,88.5944 21.5941,88.5052 21.5419,88.485 21.5851,88.4997 21.6354,88.3858 21.6314,88.3787 21.684,88.3438 21.6674,88.3482 21.6357,88.2961 21.5636,88.2496 21.5616,88.1936 21.6454,88.0931 21.6273,88.046 21.6453,88.0454 21.7144,88.1172 21.8537,88.0671 21.9101,88.0493 21.9119,87.9256 21.7998,87.8932 21.7943,87.8373 21.7181,87.6761 21.653,87.561 21.6336,87.4868 21.6112,87.41 21.5603,87.2069 21.5453,87.1169 21.509,86.9892 21.4157,86.8964 21.3175,86.8482 21.2397,86.8241 21.1754,86.8325 21.1086,86.9025 20.9894,86.9118 20.9537,86.9617 20.8583,86.959 20.7857,86.876 20.7974,86.8226 20.7699,86.7975 20.7391,86.8567 20.7732,86.9046 20.7629,86.9988 20.7635,87.0142 20.695,86.9833 20.6671,86.8031 20.5501,86.7623 20.5078,86.7332 20.456,86.7327 20.4111,86.7732 20.391,86.7824 20.3383,86.7162 20.3012,86.6795 20.2585,86.6069 20.2315,86.533 20.1796,86.4361 20.0563,86.4218 19.9881,86.372 19.9559,86.2861 19.9307,86.2304 19.9026,86.1384 19.8723,85.9527 19.8298,85.7944 19.7849,85.6695 19.7404,85.336 19.5786,85.1743 19.4679,85.1044 19.4136,85.0819 19.376,84.9739 19.3112,84.8619 19.2161,84.8048 19.1491,84.7676 19.0812,84.6751 18.9568,84.6113 18.8974,84.559 18.8185,84.5528 18.7927,84.467 18.7121,84.4417 18.662,84.3611 18.5825,84.3527 18.5534,84.2954 18.5091,84.1535 18.3762,84.1297 18.3169,84.0709 18.2755,83.9406 18.2112,83.728 18.1168,83.6745 18.0834,83.574 18.0144,83.5399 17.9587,83.4884 17.9247,83.4089 17.8411,83.4164 17.8227,83.3546 17.7566,83.2829 17.6609,83.2319 17.6234,83.213 17.591,83.158 17.559,83.0947 17.5391,83.0082 17.4984,82.9949 17.475,82.706 17.3437,82.5484 17.2524,82.4644 17.1924,82.3212 17.0605,82.2889 17.0106,82.2577 16.8863,82.3175 16.8483,82.3573 16.852,82.3415 16.7376,82.309 16.7426,82.3078 16.7025,82.3326 16.7271,82.3677 16.7169,82.3271 16.6627,82.3175 16.6048,82.319 16.5873,82.3169 16.5716,82.2075 16.5288,81.9415 16.3944,81.8352 16.3659,81.718 16.3086,81.7069 16.3157,81.6687 16.3331,81.5411 16.3493,81.4845 16.3535,81.395 16.3422,81.3277 16.317,81.2652 16.2772,81.2213 16.2133,81.1891 16.1032,81.1493 16.0323,81.1435 15.9752,81.0766 15.918,80.9996 15.8336,81.0125 15.7655,80.9476 15.721,80.9236 15.7222,80.827 15.7123,80.7687 15.8633,80.7072 15.8806,80.6477 15.8775,80.5542 15.8558,80.4392 15.8086,80.3268 15.7344,80.2519 15.6341,80.2083 15.4806,80.1096 15.3447,80.0829 15.2582,80.0834 15.1851,80.0525 15.1118,80.0524 15.02,80.0878 14.8307,80.1084 14.7515,80.1412 14.7115,80.171 14.6121,80.1951 14.5767,80.1794 14.5013,80.1685 14.3514,80.1396 14.2699,80.1273 14.1734,80.1467 14.043,80.2422 13.8213,80.2532 13.7809,80.234 13.656,80.2685 13.5634,80.2992 13.4775,80.3233 13.4559,80.3466 13.3136,80.3427 13.2563,80.3038 13.1423,80.306 13.0958,80.2844 13.0523,80.2667 12.9726,80.2479 12.8262,80.2553 12.7819,80.1711 12.5397,80.1552 12.4621,80.0606 12.3386,80.0094 12.2558,79.886 12.0646,79.8623 12.0171,79.8405 11.9562,79.809 11.8368,79.8073 11.8313,79.7969 11.7889,79.7612 11.6212,79.7601 11.5485,79.8135 11.4191,79.8377 11.3529,79.8374 11.3021,79.8535 11.2023,79.8584 11.0991,79.8549 10.9852,79.8522 10.8247,79.8559 10.608,79.8648 10.4412,79.8839 10.3056,79.8702 10.2833,79.7765 10.2726,79.6784 10.2805,79.5424 10.3024,79.536 10.3357,79.5064 10.3081,79.4054 10.3172,79.3317 10.2844,79.2684 10.2278,79.2793 10.211,79.2384 10.1701,79.2297 10.1415,79.2265 10.0998,79.2546 10.0609,79.247 10.0276,79.1285 9.8944,79.1146 9.8475,79.0576 9.7726,79.0359 9.7607,78.9809 9.6897,78.9598 9.6275,78.9362 9.5999,78.9262 9.5308,78.9026 9.4689,78.9361 9.4109,79.0138 9.3333,79.0656 9.3001,79.0963 9.2602,78.9667 9.2719,78.9114 9.2511,78.8601 9.2531,78.6798 9.1959,78.65 9.1599,78.577 9.1297,78.5184 9.1352,78.4575 9.1256,78.3901 9.0961,78.3043 9.0264,78.2164 8.9666,78.1695 8.8814,78.1615 8.7779,78.1661 8.7395,78.1406 8.6967,78.1274 8.6188,78.1385 8.5858,78.1226 8.5255,78.1282 8.4921,78.0725 8.4291,78.0621 8.37,77.9776 8.3358,77.8849 8.271,77.8023 8.2396,77.7787 8.198,77.7143 8.1639,77.6507 8.1593,77.592 8.1428,77.5608 8.1214,77.5514 8.0779,77.4488 8.0936,77.3588 8.1205,77.3049 8.1269,77.277 8.1575,77.0964 8.2905,76.9773 8.3805,76.9476 8.4364,76.8832 8.5066,76.6983 8.7365,76.6675 8.7808,76.6185 8.8511,76.5426 8.9122,76.5199 9.0138,76.4678 9.1254,76.3523 9.3778,76.3246 9.4598,76.3051 9.5558,76.277 9.7901,76.2511 9.9186,76.2241 9.9758,76.1818 10.1303,76.1633 10.1788,76.1217 10.3156,76.0664 10.4563,76.0334 10.5157,75.9565 10.6853,75.9102 10.7912,75.8464 11.0625,75.826 11.1227,75.8002 11.1708,75.7156 11.3923,75.6803 11.4509,75.6176 11.4875,75.5707 11.6176,75.5365 11.6927,75.5298 11.7019,75.384 11.8568,75.3668 11.8511,75.243 12.0141,75.2039 12.005,75.1649 12.0892,75.091 12.275,75.0433 12.3819,75.015 12.4172,74.9708 12.5082,74.8681 12.75,74.8231 12.8499,74.7603 13.1391,74.7113 13.3294,74.6949 13.345,74.6973 13.4071,74.6757 13.5868,74.6465 13.6794,74.6064 13.8682,74.5826 13.9261,74.5151 13.9869,74.4655 14.1984,74.4532 14.2008,74.4134 14.3169,74.3929 14.4182,74.3583 14.5016,74.3164 14.5191,74.2803 14.6104,74.2816 14.677,74.2395 14.7462,74.1932 14.7346,74.1431 14.7773,74.1251 14.8395,74.0918 14.8997,74.0423 14.923,74.0496 14.9573,74.0233 15.0099,73.9889 15.0209,73.967 15.0659,73.9218 15.0865,73.9497 15.1421,73.9078 15.293,73.8704 15.371,73.8414 15.3609,73.7909 15.3945,73.9046 15.4039,73.8067 15.4853,73.7641 15.5105,73.6902 15.7171,73.6741 15.7284,73.6259 15.8515,73.5868 15.9097,73.5097 15.941,73.4655 16.0719,73.4383 16.1938,73.4277 16.2097,73.3859 16.358,73.3123 16.5357,73.3513 16.5352,73.3263 16.6902,73.3058 16.7299,73.3158 16.8035,73.3009 16.8103,73.2805 16.8978,73.2925 16.9877,73.2751 17.0369,73.2817 17.105,73.2441 17.223,73.2009 17.3011,73.242 17.319,73.2068 17.3843,73.1775 17.387,73.1931 17.4654,73.1746 17.5172,73.1452 17.5424,73.141 17.6065,73.1183 17.6733,73.1344 17.7077,73.0715 17.8889,73.0298 17.9679,73.0667 17.9868,73.0209 17.9937,73.0148 18.0317,72.973 18.1328,72.9795 18.1968,72.9422 18.235,72.9381 18.2827,72.9939 18.2727,72.9487 18.3381,72.9113 18.3662,72.8953 18.4603,72.9259 18.5416,72.8558 18.6963,72.8693 18.8046,72.9605 18.7976,72.9802 18.8524,72.9225 18.8546,72.9082 18.886,72.9598 18.9733,72.9793 18.9629,73.0308 18.9991,73.0024 19.0042,72.9735 19.0597,72.9105 18.9906,72.8842 19.0017,72.865 19.0015,72.8438 18.9337,72.8103 18.8909,72.7917 18.9488,72.8173 19.0393,72.8267 19.0931,72.7823 19.1593,72.7956 19.1919,72.7762 19.2255,72.7846 19.2633,72.7845 19.3026,72.8335 19.3145,72.7971 19.3307,72.7577 19.3754,72.7437 19.5109,72.7203 19.5389,72.7298 19.598,72.6847 19.7471,72.6878 19.7933,72.6505 19.8408,72.6775 19.8663,72.6608 19.9356,72.7212 19.995,72.7015 20.0694,72.7278 20.1295,72.7451 20.2133,72.7395 20.2437,72.7782 20.3376,72.8094 20.3527,72.8277 20.3927,72.83 20.4445,72.8518 20.4645,72.8824 20.4999,72.8948 20.5978,72.8516 20.7323,72.8284 20.7658,72.8247 20.8139,72.7886 20.9031,72.752 20.9466,72.7227 21.0298,72.7235 21.0585,72.685 21.087,72.6139 21.0899,72.6108 21.1781,72.6205 21.2302,72.5955 21.262,72.6025 21.3205,72.6493 21.3674,72.6357 21.3875,72.6669 21.428,72.646 21.4409,72.6667 21.5138,72.6163 21.5509,72.6101 21.5823,72.6349 21.6153,72.7066 21.6493,72.7112 21.679,72.5986 21.6812,72.5584 21.6573,72.5087 21.6733,72.5365 21.7392,72.5363 21.7843,72.618 21.8695,72.5861 21.8943,72.5146 21.841,72.5 21.9049,72.5125 22.0445,72.5481 22.1539,72.5998 22.2163,72.6514 22.2158,72.7017 22.1856,72.7588 22.1733,72.7838 22.2158,72.7714 22.2384,72.7157 22.2585,72.6779 22.2526,72.6565 22.2806,72.5391 22.2804,72.4975 22.2536,72.4677 22.2587,72.432 22.303,72.3891 22.3157,72.3963 22.3647,72.3594 22.3217,72.3713 22.2603,72.357 22.2057,72.3122 22.1685,72.2848 22.08,72.2395 22.0604,72.2215 21.9455,72.2491 21.8924,72.2771 21.7203,72.27 21.7095,72.3048 21.6217,72.2729 21.5781,72.2544 21.5005,72.2141 21.4245,72.1392 21.3452,72.1223 21.2007,71.9717 21.1251,71.8981 21.1092,71.876 21.0888,71.8043 21.0617,71.7817 21.0306,71.7132 21.0193,71.6796 21.0006,71.6352 20.9728,71.5655 20.9501,71.5194 20.9509,71.4766 20.8897,71.4392 20.8693,71.3936 20.8677,71.3215 20.8467,71.2093 20.8014,71.1488 20.7583,71.0937 20.7577,71.0777 20.7372,71.0081 20.7381,70.9943 20.7111,70.9136 20.6995,70.8711 20.7079,70.8319 20.6918,70.7188 20.7318,70.6716 20.7605,70.5848 20.7831,70.4697 20.8387,70.3945 20.8932,70.358 20.9054,70.2296 20.9999,70.0951 21.1109,69.9825 21.2269,69.7067 21.5367,69.6028 21.6364,69.5889 21.6355,69.3747 21.828,69.2823 21.8966,69.1872 21.9894,69.0569 22.1281,68.9613 22.2381,68.9372 22.3125,68.9769 22.402,69.0112 22.4416,69.046 22.4278,69.0763 22.3906,69.128 22.3963,69.1729 22.422,69.1866 22.3851,69.1689 22.2946,69.2169 22.2593,69.2806 22.2696,69.3602 22.317,69.4181 22.3155,69.4893 22.3388,69.5537 22.3975,69.5601 22.3602,69.6179 22.3468,69.6578 22.3608,69.6992 22.4209,69.7464 22.4303,69.8158 22.4164,69.8349 22.4523,69.9079 22.4655,69.9454 22.5338,70.0217 22.5489,70.1681 22.5526,70.1979 22.6161,70.2217 22.628,70.2472 22.6877,70.2456 22.7243,70.2766 22.7364,70.3566 22.873,70.4242 22.9323,70.4332 22.9601,70.4331 22.9785,70.4598 22.997,70.4947 23.0786,70.4298 23.0581,70.4007 23.0287,70.3899 22.9558,70.3333 22.9303,70.2204 22.9561,70.1517 22.9419,70.1062 22.91,69.9569 22.8929,69.9088 22.8629,69.8665 22.8674,69.7486 22.8118,69.7145 22.7349,69.6036 22.7574,69.5477 22.7867,69.4791 22.7725,69.4122 22.8061,69.3082 22.8324,69.2686 22.8262,69.1965 22.8389,69.0231 22.9426,68.9622 22.97,68.8234 23.0513,68.7626 23.0781,68.6632 23.1448,68.5859 23.2218,68.6361 23.2425,68.634 23.3345,68.6041 23.3332,68.5483 23.3894,68.5428 23.4207,68.4924 23.5188,68.4861 23.5821,68.5238 23.6411,68.5519 23.723,68.6275 23.7434,68.6512 23.8056,68.7218 23.839,68.7711 23.8368,68.76 23.8843,68.6841 23.8665,68.63 23.8394,68.5893 23.8416,68.5426 23.7655,68.4889 23.7226,68.436 23.7284,68.4137 23.713,68.3657 23.6219,68.3214 23.5798,68.2714 23.571,68.1993 23.5951,68.1927 23.6287,68.2187 23.6519,68.2732 23.6559,68.1794 23.7411,68.2025 23.781,68.1942 23.8519,68.2197 23.8704,68.3755 23.9838,68.3865 23.9673,68.749 23.9728,68.771 24.2804,68.8314 24.3024,68.8479 24.22,68.9468 24.2804,68.9798 24.231,69.0896 24.2639,69.194 24.2365,69.2984 24.2694,69.5071 24.2584,69.5895 24.2804,69.7214 24.1706,70.018 24.1651,70.1334 24.2969,70.5948 24.4123,70.5783 24.2475,70.7981 24.22,70.8969 24.2584,70.864 24.2859,70.8776 24.2946,70.9848 24.3628,71.0343 24.3518,70.9903 24.5935,71.0892 24.6759,71.0813 24.6932,71.0288 24.8078,70.9409 24.9396,70.9182 25.0355,70.8914 25.1484,70.7541 25.2802,70.6662 25.3956,70.6772 25.6757,70.6058 25.7142,70.3861 25.6757,70.2707 25.7142,70.1761 25.8394,70.1004 25.9394,70.0839 26.0822,70.1254 26.1579,70.1773 26.2525,70.1773 26.4046,70.1773 26.5547,70.0565 26.6041,69.8971 26.5821,69.7928 26.5986,69.7214 26.6535,69.5126 26.7469,69.4851 26.7964,69.5126 27.0106,69.584 27.1809,69.7818 27.3182,69.9356 27.4995,70.029 27.5599,70.1334 27.8071,70.1993 27.8676,70.3751 28.0104,70.5069 28.0379,70.5893 28.0104,70.6772 27.9225,70.6827 27.8291,70.7187 27.7777,70.7596 27.7192,70.875 27.7028,71.2046 27.8346,71.3803 27.8731,71.666 27.8785,71.8794 27.9547,71.8967 27.9609,71.9297 28.1203,72.0066 28.2191,72.2098 28.3949,72.3032 28.6696,72.4076 28.7849,72.6348 28.8986,72.7262 28.9443,72.9205 29.0172,72.9459 29.0267,73.0064 29.153,73.0833 29.2354,73.281 29.5705,73.3964 29.944,73.5101 29.987,73.5997 30.0209,73.8084 30.0704,73.9677 30.1912,73.9567 30.2681,73.8688 30.367,74.0117 30.5318,74.0611 30.5208,74.105 30.6197,74.2039 30.6747,74.3248 30.8504,74.4566 30.9658,74.5445 30.9933,74.5665 31.0537,74.6654 31.0537,74.6674 31.0608,74.6873 31.1306,74.55 31.0867,74.5115 31.1306,74.528 31.3119,74.6544 31.4547,74.6048 31.4919,74.5885 31.5041,74.6159 31.5536,74.4841 31.7184,74.6654 31.9216,74.8192 31.9601,74.929 32.0645,74.9488 32.0579,75.0114 32.037,75.1762 32.07,75.2806 32.1194,75.374 32.2787,75.3475 32.3077,75.3136 32.3446,75.1877 32.4261,75.1326 32.4102,75.1091 32.4616,75.1061 32.463,75.0279 32.4984,74.9505 32.4465,74.8591 32.4933,74.6824 32.4926,74.6393 32.6149,74.6658 32.6769,74.6599 32.7896,74.6182 32.7615,74.5115 32.7456,74.4767 32.7723,74.4475 32.7947,74.4384 32.8121,74.4337 32.8225,74.4203 32.8521,74.4202 32.8522,74.3591 32.9275,74.3394 32.9518,74.3392 32.9526,74.3194 33.0198,74.319 33.0213,74.1848 33.0831,74.1763 33.087,74.1634 33.1059,74.1604 33.1153,74.1574 33.1248,74.1357 33.1479,74.1347 33.149,74.1174 33.1588,74.0632 33.1969,74.0615 33.1981,74.0172 33.2135,74.0161 33.2139,74.0048 33.223,74.0124 33.2638,74.0175 33.2647,74.0252 33.2661,74.0319 33.273,74.0441 33.2857,74.0539 33.2796,74.0773 33.2857,74.0924 33.288,74.0927 33.2881,74.1249 33.3038,74.1438 33.3219,74.1486 33.327,74.1551 33.334,74.1604 33.3386,74.166 33.3436,74.1672 33.3446,74.1676 33.3468,74.1811 33.4186,74.191 33.4716,74.1921 33.4776,74.1732 33.5064,74.1432 33.5521,74.14 33.5569,74.1297 33.559,74.0397 33.5772,74.0334 33.5785,74.032 33.5788,74.0303 33.5823,73.9845 33.6768,73.9618 33.7238,74.0336 33.7979,74.0584 33.8235,74.1304 33.8331,74.1936 33.8416,74.1937 33.8416,74.2782 33.9119,74.28 33.935,74.2805 33.9421,74.273 33.9633,74.2639 33.9738,74.2582 33.9919,74.2541 34.0048,74.2435 34.01,74.2213 34.0209,74.2125 34.0252,74.1545 34.0384,74.1529 34.0388,74.1158 34.0418,73.9808 34.0138,73.9663 34.0108,73.9549 34.0185,73.8973 34.0575,73.896 34.0584,73.8961 34.0589,73.9051 34.1053,73.9928 34.1769,73.9995 34.1823,73.9982 34.1971,73.9912 34.2732,73.9912 34.2737,73.9436 34.2843,73.9368 34.2858,73.9212 34.3301,73.9134 34.3523,73.911 34.3511,73.8583 34.3243,73.8454 34.3288,73.8311 34.3315,73.7978 34.3379,73.7586 34.3447,73.8031 34.427,73.8437 34.4412,73.8787 34.4535,73.9565 34.5653,73.931 34.6401,73.9308 34.6408,73.9319 34.6422,73.9685 34.6876,74.025 34.6776,74.1219 34.6605,74.1491 34.662,74.2262 34.7199,74.3098 34.7826,74.31 34.7828,74.3116 34.7827,74.5237 34.767,74.5781 34.7602,74.5785 34.76,74.6114 34.7428,74.722 34.685,74.73 34.6808,74.737 34.6805,74.9193 34.6737,74.9294 34.6733,75.0276 34.6295,75.0278 34.6296,75.088 34.6552,75.1342 34.6509,75.2642 34.6386,75.2655 34.6385,75.2656 34.6376,75.2678 34.6212,75.327 34.5702,75.3652 34.5373,75.6606 34.5328,75.7022 34.5251,75.7792 34.5109,75.8381 34.5592,76.0182 34.6633,76.0603 34.6876,76.0617 34.6884,76.1609 34.6336,76.1614 34.6333,76.1623 34.6339,76.2955 34.7177,76.2958 34.7179,76.3035 34.7198,76.4288 34.7511,76.4291 34.7513,76.4617 34.7718,76.4622 34.7721,76.4839 34.7858,76.502 34.7972,76.6017 34.7496,76.6811 34.7496,76.7475 34.8304,76.7476 34.8322,76.7548 34.918,76.7566 34.9392,76.8684 34.9838,76.8964 34.9725,76.9953 34.9324,76.9953 34.9326,77.0066 35.0177,77.0067 35.0178,77.5097 35.2652,77.7252 35.371,77.7536 35.3849,77.9106 35.4619,77.911 35.4621,77.9244 35.4974)),((93.8636 6.8204,93.8354 6.7596,93.8119 6.7617,93.8145 6.8296,93.7754 6.873,93.7531 6.9578,93.7145 7.0124,93.6666 7.0449,93.677 7.1786,93.732 7.1861,93.8158 7.235,93.868 7.217,93.8834 7.1883,93.8876 7.0837,93.9139 7.0479,93.9132 6.9993,93.9359 6.9625,93.8965 6.904,93.9097 6.8352,93.8636 6.8204)),((93.6776 7.2837,93.6474 7.2444,93.6235 7.3077,93.6336 7.3712,93.7077 7.3936,93.7126 7.4422,93.7237 7.3974,93.7555 7.3744,93.7229 7.3081,93.6776 7.2837)),((93.5796 7.9957,93.5729 7.9308,93.518 7.9745,93.5472 8.0264,93.5796 7.9957)),((93.501 8.1468,93.5499 8.0762,93.4833 8.08,93.4593 8.1245,93.4564 8.1735,93.523 8.2329,93.5288 8.1806,93.501 8.1468)),((93.4304 7.9057,93.3779 7.883,93.3473 7.8963,93.3108 7.9535,93.3298 8.0082,93.3786 8.0268,93.4046 7.973,93.4617 7.9351,93.4304 7.9057)),((93.1941 8.225,93.2004 8.1955,93.1207 8.224,93.0869 8.2711,93.1021 8.346,93.142 8.3462,93.1272 8.2717,93.1941 8.225)),((93.0917 12.1041,93.0717 12.0857,93.0374 12.1366,93.0825 12.1967,93.0917 12.1041)),((93.0353 13.09,93.006 13.0307,92.9637 13.0171,92.9152 13.0477,92.9029 13.0209,92.9376 12.9695,92.9082 12.9508,92.8753 12.9655,92.8707 12.8935,92.9286 12.8818,92.9538 12.8046,92.9346 12.773,92.9683 12.7383,92.9557 12.6063,92.975 12.5446,92.9415 12.4499,92.8995 12.4172,92.8288 12.4257,92.881 12.3114,92.8298 12.3051,92.7731 12.3168,92.7555 12.2964,92.7003 12.3269,92.6988 12.4258,92.7083 12.4945,92.7158 12.6393,92.7438 12.6711,92.7401 12.733,92.7214 12.7913,92.7245 12.8284,92.7589 12.8572,92.7943 12.8627,92.8026 12.939,92.7952 13.03,92.8205 13.1325,92.8189 13.2744,92.8323 13.3657,92.8722 13.4716,92.9303 13.5016,92.919 13.5362,92.9833 13.5483,93.0269 13.5789,93.0449 13.5286,93.0325 13.4243,93.0689 13.3968,92.9794 13.3357,93.0569 13.2556,93.0325 13.1771,93.0353 13.09)),((93.0539 11.9036,93.0221 11.9024,92.9897 11.9513,92.9305 12.0047,92.9825 12.0423,93.0539 11.9036)),((93.0493 12.0826,93.0064 12.0807,93.0021 12.1332,93.0284 12.1429,93.0493 12.0826)),((92.8115 12.117,92.7642 12.0637,92.7392 12.0976,92.7655 12.1773,92.7436 12.2511,92.7916 12.3039,92.8244 12.3052,92.8726 12.2997,92.8594 12.2472,92.8747 12.1932,92.8233 12.1672,92.8115 12.117)),((92.8288 9.1398,92.8026 9.1199,92.7326 9.1239,92.7208 9.1957,92.7642 9.2143,92.7804 9.2499,92.8155 9.2181,92.8288 9.1398)),((92.6891 12.2348,92.718 12.1751,92.7572 12.1771,92.735 12.1034,92.7578 12.0652,92.7382 12.0414,92.7486 11.978,92.7154 11.9514,92.7875 11.9187,92.7861 11.8652,92.7447 11.6913,92.7524 11.6098,92.7121 11.4886,92.6463 11.5246,92.6431 11.5589,92.6056 11.6084,92.5873 11.7175,92.5521 11.7198,92.5493 11.8166,92.5138 11.8472,92.5268 11.8953,92.5606 11.9365,92.602 11.8945,92.6228 12.0291,92.6199 12.0715,92.6459 12.1777,92.6891 12.2348)),((92.7195 12.8736,92.694 12.8369,92.6647 12.8815,92.692 12.9923,92.7196 12.9794,92.7195 12.8736)),((92.6643 11.3528,92.5989 11.3472,92.5814 11.368,92.6247 11.4089,92.6158 11.4814,92.6696 11.486,92.6848 11.4331,92.6581 11.4124,92.6902 11.3701,92.6643 11.3528)),((92.5683 10.5819,92.5309 10.516,92.4791 10.52,92.419 10.5468,92.4195 10.6165,92.3781 10.6985,92.3809 10.7612,92.5161 10.9004,92.5601 10.8619,92.5876 10.787,92.5986 10.68,92.5514 10.6363,92.5397 10.6086,92.5683 10.5819)),((92.2701 11.5846,92.2609 11.5178,92.2127 11.5344,92.2158 11.5944,92.2701 11.5846)),((88.8569 21.1637,88.7775 21.1456,88.6989 21.1802,88.6846 21.2019,88.6507 21.3289,88.6494 21.3787,88.6714 21.4086,88.7376 21.3993,88.7932 21.3562,88.8147 21.2699,88.8468 21.2295,88.8569 21.1637)),((88.6489 21.2255,88.6251 21.1684,88.5742 21.1721,88.5579 21.1212,88.4985 21.1397,88.489 21.2683,88.5068 21.3083,88.5023 21.3753,88.5834 21.4086,88.6236 21.3755,88.6173 21.3154,88.6489 21.2255)),((88.4613 21.3824,88.4236 21.3041,88.3854 21.3363,88.4262 21.3921,88.4613 21.3824)),((88.3983 21.1184,88.3569 21.0683,88.32 21.0723,88.3067 21.1071,88.3205 21.1715,88.3147 21.2468,88.3442 21.356,88.3646 21.2959,88.4042 21.2752,88.4117 21.2227,88.3983 21.1184)),((88.2586 21.1641,88.238 21.1356,88.1961 21.1538,88.2206 21.276,88.245 21.2957,88.3022 21.3021,88.2662 21.2497,88.2586 21.1641)),((88.1753 21.2267,88.1412 21.2227,88.1348 21.2625,88.1819 21.2665,88.1753 21.2267)),((88.1276 21.0996,88.0851 21.0864,88.0152 21.1475,88.0245 21.2214,88.0626 21.2679,88.105 21.2531,88.116 21.2227,88.1097 21.1777,88.1276 21.0996)),((87.9669 21.2066,87.953 21.1577,87.8669 21.1717,87.8632 21.1947,87.9235 21.2923,87.94 21.3345,87.9793 21.3358,88.0011 21.2672,87.9669 21.2066)),((85.4607 19.4936,85.4238 19.4761,85.409 19.5077,85.4464 19.5274,85.4607 19.4936)),((79.315 9.2826,79.3372 9.2503,79.2253 9.2596,79.3109 9.3282,79.315 9.2826)),((72.3643 21.8207,72.3179 21.8199,72.3004 21.8911,72.2962 21.9528,72.3368 21.9964,72.3984 21.9891,72.403 21.9297,72.3702 21.8668,72.3643 21.8207)),((72.0981 11.2152,72.0934 11.1543,72.0388 11.1055,71.9988 11.1777,72.0399 11.1752,72.0981 11.2152)),((71.9198 12.3273,71.8926 12.295,71.8837 12.3846,71.9212 12.3821,71.9198 12.3273)))&quot;</value>
                  <value>22.741</value>
                  <value>78.236000000000004</value>
                  <value>16.309090909090912</value>
                </tuple>
              </tuple-reference>
            </tuple-selection>
          </selection-collection>
          <floating-toolbar-visibility value='1' />
          <default-map-tool-selection tool='1' />
        </viewpoint>
        <viewpoint name='Distribuation of Cost of Living Rent'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.043si4z1bpu3rw1arc7hc12wyv8j].[:Measure Names]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Local Purchasing Index by Countries'>
          <zoom type='entire-view' />
          <default-map-tool-selection tool='1' />
        </viewpoint>
        <viewpoint name='Top 10 countries'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='39' />
      <simple-id uuid='{31B5D487-48BA-4FAA-9336-B3379D72ADC4}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='City Affordability' width='192'>
      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
      Xd0AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Cost index by Countries' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
      /z/9di14Rl3pMwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Distribuation of Cost of Living Rent' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAACaElEQVR4nO3WwUoDQRRFwdcTyf//bgJJu0oQQTAKujhVq7e803Bg1t57D0Qd/z0A/pMA
      SBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0
      AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMA
      aQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAm
      ANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIg
      TQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANLeHsflcpnT6TQzM7fb7Xnf7/c5juN5
      r7VmrfWte+89e+85juPl+/OOV+/f7p6ZH31DYff5fJ7r9frl/r/c/PG9fvLuaz8WQJBfINIE
      QJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCk
      CYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoA
      SBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0
      AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMA
      aQIgTQCkCYA0AZAmANIEQJoASBMAaQIg7R3UfvlkRfzsAAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Local Purchasing Index by Countries' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Tooltip2' width='192'>
      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
      KQCxmgIQqykAsZoCEKspALGaAhCrKQCxmgIQqykAsZoCEKspALGaAhCrKQCxmgIQqykAsZoC
      EKspALGaAhCrKQCxmgIQqykAsZoCEKspALGaAhCrKQCxmgIQqykAsZoCEKspALGaAhCrKQCx
      mgIQqykAsZoCEKspALGaAhCrKQCxmgIQqykAsZoCEKspALGaAhCrKQCxmgIQqykAsZoCEKsp
      ALGaAhCrKQCxmgIQqykAsZoCEKspALGaAhCrKQCxmgIQqykAsZoCEKspALGaAhCrKQCxmgIQ
      qykAsZoCEKspALGaAhCrKQCxmgIQqykAsZoCEKspALGaAhCrKQCxmgIQqykAsZoCEKspALGa
      AhCrKQCxmgIQqykAsZoCEKspALGaAhCrKQCxmgIQqykAsZoCEKspALGaAhCrKQCxmgIQqykA
      sZoCEKspALGaAhCrKQCxmgIQqykAsZoCEKt5X/zgOA6pVKqWYwHAGIPL5ar1MICvHxO3uz5e
      I+rlcTHGANTNWH7oOFzmf/5H9XSy64Uek//LcRxcLlddBLAXvjm7tTrR5WKO2Eocx8D6Wpxi
      uYpTLZPJ5qmU8iwtLpLK5msytlo9JsY4rMVXyBZK5NIJthJpMIZ0Og1AJrnNxnayJmNzu901
      e/Knk9usb+5gqmWexddwjKGQy1Aql1heXORpLI6zy2N6v/tX9lcmk8PvyjP95Vf4u3vYmF+g
      I+hhK2/o8lcpOgH8Pl+th3mgSvksTYEg0YV5XBh8boPLCTM9u8RbE2d4PLvM4ImhWg/zwBWK
      ZTbiz9ne9NLVcYTF2DqFjVnah9+kt6+PufkF+vsjuzpmzef3Jo9hK2Nob22mp7cbn8dFX6Qf
      n8dFd3iAjqCL6OJKrYd5oJr8fjZW4wwMDNLcHCDUGqCppYPOtiDVQgrjbyX+bAVT64EesEox
      S2tPLx53E9093ZhSmf5jYcBNtZiirSfCbuemmgcQi61gnDLB7g6iU4/wBUOsLC+ysb7O9k6S
      jc0d2tpDtR7mgUpsrJEtOWSyOVyVApvpCpXsJptbm2wV/Rwhhz/QsuuT3dgqrKw8J5/J0N4W
      4MtHs3R0h1heWSeT2iGRLnLsaMeuj/rfygeNQWyzi5sAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Top 10 countries' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
